This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-28T02:31:07.628Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.mjs
netlify.toml
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/components/layout/Footer.tsx
src/components/layout/Header.tsx
src/components/layout/Layout.tsx
src/components/layout/Navigation.tsx
src/pages/_app.tsx
src/pages/_document.tsx
src/pages/api/generateNote.ts
src/pages/api/hello.ts
src/pages/contact.tsx
src/pages/demo.tsx
src/pages/features.tsx
src/pages/index.tsx
src/pages/pricing.tsx
src/pages/technical-specs.tsx
src/styles/globals.css
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: netlify.toml
================
[build]
  command = "npm run build"
  publish = ".next"
  functions = "netlify/functions"

[[plugins]]
  package = "@netlify/plugin-nextjs"

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  reactStrictMode: true,
};

export default nextConfig;

================
File: package.json
================
{
  "name": "flonotes-website",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "@hookform/resolvers": "^3.9.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.469.0",
    "next": "15.1.3",
    "openai": "^4.77.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "tailwind-merge": "^2.6.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@netlify/plugin-nextjs": "^5.9.2",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/pages/api-reference/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn-pages-router) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/pages/building-your-application/deploying) for more details.

================
File: src/components/layout/Footer.tsx
================
// src/components/layout/Footer.tsx
import React from 'react';
import Link from 'next/link';

const Footer: React.FC = () => {
  const footerSections = [
    {
      title: 'Product',
      links: [
        { name: 'Features', href: '/features' },
        { name: 'Demo', href: '/demo' },
        { name: 'Pricing', href: '/pricing' },
        { name: 'Technical Specs', href: '/technical-specs' },
      ],
    },
    {
      title: 'Support',
      links: [
        { name: 'Documentation', href: '#' },
        { name: 'Guides', href: '#' },
        { name: 'API Reference', href: '#' },
        { name: 'Contact', href: '/contact' },
      ],
    },
    {
      title: 'Company',
      links: [
        { name: 'About', href: '#' },
        { name: 'Blog', href: '#' },
        { name: 'Careers', href: '#' },
        { name: 'Legal', href: '#' },
      ],
    },
  ];

  return (
    <footer className="bg-white border-t border-gray-200">
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
          <div className="col-span-2 md:col-span-1">
            <Link href="/" className="flex items-center">
              <span className="text-xl font-bold text-primary-600">FloNotes</span>
            </Link>
            <p className="mt-4 text-sm text-gray-500">
              Advanced progress note generation for mental health professionals.
            </p>
          </div>
          
          {footerSections.map((section) => (
            <div key={section.title}>
              <h3 className="text-sm font-semibold text-gray-400 tracking-wider uppercase">
                {section.title}
              </h3>
              <ul className="mt-4 space-y-4">
                {section.links.map((link) => (
                  <li key={link.name}>
                    <Link
                      href={link.href}
                      className="text-base text-gray-500 hover:text-gray-900"
                    >
                      {link.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        
        <div className="mt-8 border-t border-gray-200 pt-8">
          <p className="text-base text-gray-400 text-center">
            &copy; {new Date().getFullYear()} FloNotes. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

================
File: src/components/layout/Header.tsx
================
import React, { useState } from 'react';
import Link from 'next/link';
import { Menu, X } from 'lucide-react';
import Navigation from './Navigation';

const Header: React.FC = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  return (
    <header className="bg-white border-b border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <Link href="/" className="flex-shrink-0 flex items-center">
              <span className="text-2xl font-bold text-primary-600">FloNotes</span>
            </Link>
          </div>
          
          <Navigation className="hidden md:flex" />
          
          <div className="flex items-center md:hidden">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100"
            >
              {isMobileMenuOpen ? (
                <X className="block h-6 w-6" />
              ) : (
                <Menu className="block h-6 w-6" />
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <div className="md:hidden">
          <Navigation mobile />
        </div>
      )}
    </header>
  );
};

export default Header;

================
File: src/components/layout/Layout.tsx
================
import React from 'react';
import Header from './Header';
import Footer from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">{children}</main>
      <Footer />
    </div>
  );
};

export default Layout;

================
File: src/components/layout/Navigation.tsx
================
// src/components/layout/Navigation.tsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';


interface NavigationProps {
  mobile?: boolean;
  className?: string;
}

const Navigation: React.FC<NavigationProps> = ({ mobile, className }) => {
  const router = useRouter();
  
  const navItems = [
    { name: 'Features', href: '/features' },
    { name: 'Demo', href: '/demo' },
    { name: 'Technical Specs', href: '/technical-specs' },
    { name: 'Pricing', href: '/pricing' },
    { name: 'Contact', href: '/contact' },
  ];

  const baseStyles = mobile
    ? 'space-y-1 px-2 pb-3 pt-2'
    : 'ml-10 flex items-center space-x-4';

  return (
    <nav className={`${baseStyles} ${className || ''}`}>
      {navItems.map((item) => {
        const isActive = router.pathname === item.href;
        const linkStyles = mobile
          ? `block px-3 py-2 rounded-md text-base font-medium ${
              isActive
                ? 'text-primary-600 bg-primary-50'
                : 'text-gray-700 hover:text-primary-600 hover:bg-primary-50'
            }`
          : `px-3 py-2 rounded-md text-sm font-medium ${
              isActive
                ? 'text-primary-600'
                : 'text-gray-700 hover:text-primary-600'
            }`;

        return (
          <Link
            key={item.name}
            href={item.href}
            className={linkStyles}
          >
            {item.name}
          </Link>
        );
      })}
      
      <Link
        href="#"
        className={`${
          mobile
            ? 'block px-3 py-2 rounded-md text-base font-medium'
            : 'ml-8 inline-flex items-center'
        } px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700`}
      >
        Sign In
      </Link>
    </nav>
  );
};

export default Navigation;

================
File: src/pages/_app.tsx
================
// src/pages/_app.tsx
import "@/styles/globals.css";
import type { AppProps } from "next/app";
import Layout from "@/components/layout/Layout";

export default function App({ Component, pageProps }: AppProps) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

================
File: src/pages/_document.tsx
================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

================
File: src/pages/api/generateNote.ts
================
// pages/api/generateNote.ts

import type { NextApiRequest, NextApiResponse } from 'next';
import * as OpenAI from 'openai';

const configuration = new OpenAI.Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAI.OpenAIApi(configuration);



export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { prompt } = req.body;

  if (!prompt || typeof prompt !== 'string') {
    return res.status(400).json({ error: 'Invalid prompt' });
  }

  try {
    const response = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo', // You can choose a different model if desired
      messages: [
        {
          role: 'system',
          content: `You are a professional healthcare worker writing progress notes in a residential treatment setting. Create concise, natural-flowing narrative summaries that focus on the most significant observations while maintaining professional medical documentation standards.`,
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 750, // Adjust as needed
      temperature: 0.7, // Adjust creativity as needed
    });

    const generatedNote = response.data.choices[0].message?.content?.trim();

    if (!generatedNote) {
      throw new Error('No content generated by OpenAI');
    }

    res.status(200).json({ generatedNote });
  } catch (error: any) {
    console.error('Error generating note:', error);
    res.status(500).json({ error: 'Failed to generate note' });
  }
}

================
File: src/pages/api/hello.ts
================
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  name: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>,
) {
  res.status(200).json({ name: "John Doe" });
}

================
File: src/pages/contact.tsx
================
// src/pages/contact.tsx
import React from 'react';
import { Phone, Mail, Clock, MapPin } from 'lucide-react';

export default function Contact() {
  const contactMethods = [
    {
      icon: <Phone className="h-6 w-6" />,
      name: 'Sales',
      description: 'Talk to our sales team',
      contact: '+1 (555) 123-4567',
      href: 'tel:+15551234567',
    },
    {
      icon: <Mail className="h-6 w-6" />,
      name: 'Support',
      description: 'Get technical help',
      contact: 'support@flonotes.com',
      href: 'mailto:support@flonotes.com',
    },
    {
      icon: <Clock className="h-6 w-6" />,
      name: 'Hours',
      description: 'Mon-Fri',
      contact: '9:00 AM - 5:00 PM EST',
    },
    {
      icon: <MapPin className="h-6 w-6" />,
      name: 'Office',
      description: 'Visit our office',
      contact: '123 Health Tech Drive, Boston, MA 02110',
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-primary-700">
        <div className="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight text-white sm:text-5xl lg:text-6xl">
              Get in Touch
            </h1>
            <p className="mt-4 text-xl text-primary-100">
              We&apos;re here to help with any questions about FloNotes
            </p>
          </div>
        </div>
      </div>

      {/* Contact Methods */}
      <div className="max-w-7xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-8 lg:grid-cols-4">
          {contactMethods.map((method) => (
            <div
              key={method.name}
              className="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow"
            >
              <div className="text-primary-600">{method.icon}</div>
              <h3 className="mt-4 text-lg font-medium text-gray-900">{method.name}</h3>
              <p className="mt-1 text-sm text-gray-500">{method.description}</p>
              {method.href ? (
                <a
                  href={method.href}
                  className="mt-3 block text-base text-primary-600 hover:text-primary-500"
                >
                  {method.contact}
                </a>
              ) : (
                <p className="mt-3 text-base text-gray-900">{method.contact}</p>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Contact Form */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="max-w-3xl mx-auto">
          <div className="bg-white py-16 px-4 sm:px-6 lg:px-8 shadow-lg rounded-lg">
            <div className="max-w-lg mx-auto">
              <h2 className="text-2xl font-bold text-gray-900 sm:text-3xl">Send us a message</h2>
              <p className="mt-4 text-gray-500">
                Fill out the form below and we&apos;ll get back to you within 24 hours.
              </p>
              <form className="mt-8 grid grid-cols-1 gap-6">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                    Name
                  </label>
                  <div className="mt-1">
                    <input
                      type="text"
                      name="name"
                      id="name"
                      className="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="Your name"
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                    Email
                  </label>
                  <div className="mt-1">
                    <input
                      type="email"
                      name="email"
                      id="email"
                      className="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="you@example.com"
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="subject" className="block text-sm font-medium text-gray-700">
                    Subject
                  </label>
                  <div className="mt-1">
                    <input
                      type="text"
                      name="subject"
                      id="subject"
                      className="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="How can we help?"
                    />
                  </div>
                </div>

                <div>
                  <label htmlFor="message" className="block text-sm font-medium text-gray-700">
                    Message
                  </label>
                  <div className="mt-1">
                    <textarea
                      id="message"
                      name="message"
                      rows={4}
                      className="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 rounded-md"
                      placeholder="Your message..."
                    />
                  </div>
                </div>

                <div>
                  <button
                    type="submit"
                    className="w-full inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                  >
                    Send Message
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* Map or Additional Info Section */}
      <div className="bg-white mt-16">
        <div className="max-w-7xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
          <div className="bg-primary-700 rounded-lg shadow-xl overflow-hidden lg:grid lg:grid-cols-2 lg:gap-4">
            <div className="pt-10 pb-12 px-6 sm:pt-16 sm:px-16 lg:py-16 lg:pr-0 xl:py-20 xl:px-20">
              <div className="lg:self-center">
                <h2 className="text-3xl font-bold text-white sm:text-4xl">
                  <span className="block">Ready to get started?</span>
                </h2>
                <p className="mt-4 text-lg leading-6 text-primary-200">
                  Sign up for a free trial today and experience how FloNotes can transform your clinical documentation process.
                </p>
                <a
                  href="#"
                  className="mt-8 inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-primary-700 bg-white hover:bg-primary-50 sm:px-8"
                >
                  Start Free Trial
                </a>
              </div>
            </div>
            <div className="-mt-6 aspect-w-5 aspect-h-3 md:aspect-w-2 md:aspect-h-1">
              <div className="transform translate-x-6 translate-y-6 rounded-md object-cover object-left-top sm:translate-x-16 lg:translate-y-20">
                {/* This is where you could add an image or illustration */}
                <div className="w-full h-full bg-primary-800 opacity-25 rounded-md"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/demo.tsx
================
// pages/demo.tsx

import React, { useState } from 'react'
import { MessageSquare, RotateCcw, Save } from 'lucide-react'

interface MoodState {
  primary: string
  intensity: number
  hasSecondary: boolean
  secondary: string
  secondaryIntensity: number
}

interface BehaviorsState {
  cooperative: boolean
  followingRules: boolean
  respectful: boolean
  disruptive: boolean
  withdrawn: boolean
  aggressive: boolean
  impulsive: boolean
  other: boolean
  otherDescription: string
}

interface ActivityState {
  participated: boolean
  engagement: number
}

interface SocialState {
  peer: string
  staff: string
  overallInteraction: number
}

interface HealthState {
  medicationsTaken: boolean
  sleepIssues: boolean
  appetiteIssues: boolean
  physicalComplaints: boolean
  hygieneIssues: boolean
  safetyConcerns: boolean
  healthDescription: string
}

interface IncidentsState {
  occurred: boolean
  description: string
  copingSkillsUsed: {
    deepBreathing: boolean
    mindfulness: boolean
    distraction: boolean
    journaling: boolean
    physicalActivity: boolean
    talkingToStaff: boolean
    other: boolean
  }
  otherCopingSkillDescription: string
  effectiveness: number
}

const Demo = () => {
  // -------------------------------
  // 1) State Hooks for Each Section
  // -------------------------------
  const [mood, setMood] = useState<MoodState>({
    primary: 'Stable',
    intensity: 5,
    hasSecondary: false,
    secondary: 'Anxious',
    secondaryIntensity: 5,
  })

  const [behaviors, setBehaviors] = useState<BehaviorsState>({
    cooperative: false,
    followingRules: false,
    respectful: false,
    disruptive: false,
    withdrawn: false,
    aggressive: false,
    impulsive: false,
    other: false,
    otherDescription: '',
  })

  const [activities, setActivities] = useState<Record<string, ActivityState>>({
    'Group Therapy': { participated: false, engagement: 5 },
    'Individual Therapy': { participated: false, engagement: 5 },
    'Recreational Activities': { participated: false, engagement: 5 },
    'Skill Building Groups': { participated: false, engagement: 5 },
  })

  const [social, setSocial] = useState<SocialState>({
    peer: 'Appropriate',
    staff: 'Appropriate',
    overallInteraction: 5,
  })

  const [health, setHealth] = useState<HealthState>({
    medicationsTaken: false,
    sleepIssues: false,
    appetiteIssues: false,
    physicalComplaints: false,
    hygieneIssues: false,
    safetyConcerns: false,
    healthDescription: '',
  })

  const [incidents, setIncidents] = useState<IncidentsState>({
    occurred: false,
    description: '',
    copingSkillsUsed: {
      deepBreathing: false,
      mindfulness: false,
      distraction: false,
      journaling: false,
      physicalActivity: false,
      talkingToStaff: false,
      other: false,
    },
    otherCopingSkillDescription: '',
    effectiveness: 5,
  })

  const [additionalNotes, setAdditionalNotes] = useState<string>('')

  // -------------------------------
  // 2) The Generated Note
  // -------------------------------
  const [generatedNote, setGeneratedNote] = useState<string>('')
  const [loading, setLoading] = useState<boolean>(false)
  const [errorMsg, setErrorMsg] = useState<string | null>(null)

  // -------------------------------
  // 3) Collect Form Data / Prompt
  // -------------------------------
  function collectFormData() {
    return {
      mood,
      behaviors,
      activities,
      social,
      health,
      incidents,
      additionalNotes,
    }
  }

  /**
   * Replicates your Python `create_ai_prompt` logic.
   * Constructs a detailed prompt based on user input.
   */
  function createAiPrompt(data: ReturnType<typeof collectFormData>) {
    const { mood, behaviors, activities, social, health, incidents, additionalNotes } = data
    let prompt = `You are writing a focused mental health progress note.\n\n`

    // Mood
    prompt += `Mood & Affect:\n`
    const categorizeMood = (mood: string) => {
      const positive = ['happy', 'joyful', 'content', 'optimistic', 'energetic', 'grateful']
      const negative = ['depressed', 'anxious', 'irritable', 'withdrawn', 'agitated', 'angry', 'sad']
      const baseline = ['stable']

      const moodLower = mood.toLowerCase()
      if (positive.includes(moodLower)) return 'positive'
      if (negative.includes(moodLower)) return 'negative'
      if (baseline.includes(moodLower)) return 'baseline'
      return 'neutral'
    }

    const intensityDescriptor = (value: number, type: string) => {
      if (type === 'positive') {
        if (value <= 3) return 'mildly'
        if (value <= 7) return 'moderately'
        return 'markedly'
      } else if (type === 'negative') {
        if (value <= 3) return 'mildly'
        if (value <= 7) return 'moderately'
        return 'significantly'
      } else if (type === 'baseline') {
        if (value <= 3) return 'minimally'
        if (value <= 7) return 'moderately'
        return 'notably'
      }
      return 'generally'
    }

    const primaryType = categorizeMood(mood.primary)
    const primaryDesc = intensityDescriptor(mood.intensity, primaryType)
    prompt += `- Presenting as ${primaryDesc} ${mood.primary}.\n`

    if (mood.hasSecondary) {
      const secondaryType = categorizeMood(mood.secondary)
      const secondaryDesc = intensityDescriptor(mood.secondaryIntensity, secondaryType)
      prompt += `- Additionally displaying ${secondaryDesc} ${mood.secondary}.\n`
    }

    // Behaviors
    const checkedBehaviors = Object.entries(behaviors)
      .filter(([key, val]) => val && key !== 'other')
      .map(([key]) => key.replace(/([A-Z])/g, ' $1'))

    if (checkedBehaviors.length > 0) {
      prompt += `\nBehaviors:\n- ${checkedBehaviors.join(', ')}.\n`
    }

    if (behaviors.other && behaviors.otherDescription.trim() !== '') {
      prompt += `- Other Behavior: ${behaviors.otherDescription}.\n`
    }

    // Activities
    const participatedActivities = Object.entries(activities)
      .filter(([_, val]) => val.participated)
      .map(
        ([name, val]) =>
          `${name} with an engagement level of ${val.engagement}/10`
      )

    if (participatedActivities.length > 0) {
      prompt += `\nActivities and Engagement:\n- ${participatedActivities.join(', ')}.\n`
    }

    // Social Interactions
    prompt += `\nSocial Interactions:\n- Peer Interactions: ${social.peer}.\n- Staff Interactions: ${social.staff}.\n- Overall Social Interaction Level: ${social.overallInteraction}/10.\n`

    // Health and Safety
    const healthConcerns = [
      health.medicationsTaken && 'Medications Taken',
      health.sleepIssues && 'Sleep Issues',
      health.appetiteIssues && 'Appetite Issues',
      health.physicalComplaints && 'Physical Complaints',
      health.hygieneIssues && 'Hygiene Issues',
      health.safetyConcerns && 'Safety Concerns',
    ].filter(Boolean)

    if (healthConcerns.length > 0) {
      prompt += `\nHealth and Safety:\n- ${healthConcerns.join(', ')}.\n`
      if (health.healthDescription.trim() !== '') {
        prompt += `- Details: ${health.healthDescription}.\n`
      }
    }

    // Incidents
    if (incidents.occurred) {
      prompt += `\nIncidents:\n- Description: ${incidents.description}.\n`
      const copingSkills = Object.entries(incidents.copingSkillsUsed)
        .filter(([_, val]) => val)
        .map(([key]) => key.replace(/([A-Z])/g, ' $1'))
      if (copingSkills.length > 0) {
        prompt += `- Coping Skills Used: ${copingSkills.join(', ')}.\n`
        if (incidents.copingSkillsUsed.other && incidents.otherCopingSkillDescription.trim() !== '') {
          prompt += `  * Other Coping Skill: ${incidents.otherCopingSkillDescription}.\n`
        }
      }
      prompt += `- Effectiveness of Coping Skills: ${incidents.effectiveness}/10.\n`
    }

    // Additional Notes
    if (additionalNotes.trim() !== '') {
      prompt += `\nAdditional Notes:\n${additionalNotes}\n`
    }

    // Guidance
    prompt += `
Please produce a concise, clinically relevant progress note (maximum ~200 words) focusing on the most significant observations and end with one key clinical insight.
    `

    return prompt
  }

  // -------------------------------
  // 4) Generate the Note via OpenAI
  // -------------------------------
  const handleGenerateNote = async () => {
    setLoading(true)
    setErrorMsg(null)
    setGeneratedNote('')

    try {
      const data = collectFormData()
      const prompt = createAiPrompt(data)

      const response = await fetch('/api/generateNote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to generate note.')
      }

      const { generatedNote } = await response.json()
      setGeneratedNote(generatedNote)
    } catch (error: any) {
      console.error('Note generation error:', error)
      setErrorMsg(error.message || 'Something went wrong.')
    } finally {
      setLoading(false)
    }
  }

  // -------------------------------
  // 5) Reset/Clear All
  // -------------------------------
  const handleReset = () => {
    setMood({
      primary: 'Stable',
      intensity: 5,
      hasSecondary: false,
      secondary: 'Anxious',
      secondaryIntensity: 5,
    })
    setBehaviors({
      cooperative: false,
      followingRules: false,
      respectful: false,
      disruptive: false,
      withdrawn: false,
      aggressive: false,
      impulsive: false,
      other: false,
      otherDescription: '',
    })
    setActivities({
      'Group Therapy': { participated: false, engagement: 5 },
      'Individual Therapy': { participated: false, engagement: 5 },
      'Recreational Activities': { participated: false, engagement: 5 },
      'Skill Building Groups': { participated: false, engagement: 5 },
    })
    setSocial({
      peer: 'Appropriate',
      staff: 'Appropriate',
      overallInteraction: 5,
    })
    setHealth({
      medicationsTaken: false,
      sleepIssues: false,
      appetiteIssues: false,
      physicalComplaints: false,
      hygieneIssues: false,
      safetyConcerns: false,
      healthDescription: '',
    })
    setIncidents({
      occurred: false,
      description: '',
      copingSkillsUsed: {
        deepBreathing: false,
        mindfulness: false,
        distraction: false,
        journaling: false,
        physicalActivity: false,
        talkingToStaff: false,
        other: false,
      },
      otherCopingSkillDescription: '',
      effectiveness: 5,
    })
    setAdditionalNotes('')
    setGeneratedNote('')
    setErrorMsg(null)
  }

  // -------------------------------
  // 6) Render the Demo
  // -------------------------------
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="bg-white">
        <div className="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl md:text-6xl">
              Try FloNotes In Action
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              Experience how FloNotes can transform your clinical documentation process with our interactive demo.
            </p>
          </div>
        </div>
      </div>

      {/* Main Demo Interface */}
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-lg shadow-xl overflow-hidden">
          <div className="p-6 md:p-8">
            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              {/* Left Column: The Form */}
              <div className="space-y-6">
                <h2 className="text-2xl font-bold text-gray-900">Progress Note Inputs</h2>

                {/* Mood Section */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">Primary Mood</label>
                  <select
                    className="w-full border-gray-300 rounded-md"
                    value={mood.primary}
                    onChange={(e) => setMood({ ...mood, primary: e.target.value })}
                  >
                    <option>Stable</option>
                    <option>Depressed</option>
                    <option>Anxious</option>
                    <option>Irritable</option>
                    <option>Withdrawn</option>
                    <option>Agitated</option>
                    <option>Happy</option>
                    <option>Sad</option>
                    <option>Joyful</option>
                    <option>Content</option>
                    <option>Optimistic</option>
                    <option>Energetic</option>
                    <option>Grateful</option>
                  </select>

                  <label className="block text-sm font-medium text-gray-700">Mood Intensity (1-10)</label>
                  <input
                    type="range"
                    min={1}
                    max={10}
                    className="w-full"
                    value={mood.intensity}
                    onChange={(e) =>
                      setMood({ ...mood, intensity: Number(e.target.value) })
                    }
                  />
                  <p className="text-sm text-gray-500">Current: {mood.intensity}/10</p>

                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={mood.hasSecondary}
                      onChange={(e) => setMood({ ...mood, hasSecondary: e.target.checked })}
                    />
                    <label className="text-sm font-medium text-gray-700">Add Secondary Mood</label>
                  </div>

                  {mood.hasSecondary && (
                    <div className="space-y-2">
                      <label className="block text-sm font-medium text-gray-700">Secondary Mood</label>
                      <select
                        className="w-full border-gray-300 rounded-md"
                        value={mood.secondary}
                        onChange={(e) => setMood({ ...mood, secondary: e.target.value })}
                      >
                        <option>Stable</option>
                        <option>Depressed</option>
                        <option>Anxious</option>
                        <option>Irritable</option>
                        <option>Withdrawn</option>
                        <option>Agitated</option>
                        <option>Happy</option>
                        <option>Sad</option>
                        <option>Joyful</option>
                        <option>Content</option>
                        <option>Optimistic</option>
                        <option>Energetic</option>
                        <option>Grateful</option>
                      </select>

                      <label className="block text-sm font-medium text-gray-700">
                        Secondary Intensity (1-10)
                      </label>
                      <input
                        type="range"
                        min={1}
                        max={10}
                        className="w-full"
                        value={mood.secondaryIntensity}
                        onChange={(e) =>
                          setMood({ ...mood, secondaryIntensity: Number(e.target.value) })
                        }
                      />
                      <p className="text-sm text-gray-500">Current: {mood.secondaryIntensity}/10</p>
                    </div>
                  )}
                </div>

                {/* Behaviors Section */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">Behaviors</label>
                  <div className="grid grid-cols-2 gap-2">
                    {Object.entries(behaviors)
                      .filter(([key]) => !['otherDescription'].includes(key))
                      .map(([key, val]) => {
                        if (key === 'other') {
                          return (
                            <div key={key} className="flex items-center space-x-2">
                              <input
                                type="checkbox"
                                checked={val as boolean}
                                onChange={(e) =>
                                  setBehaviors({ ...behaviors, [key]: e.target.checked })
                                }
                              />
                              <label className="text-sm capitalize">{key.replace(/([A-Z])/g, ' $1')}</label>
                            </div>
                          )
                        }
                        if (typeof val === 'boolean') {
                          return (
                            <div key={key} className="flex items-center space-x-2">
                              <input
                                type="checkbox"
                                checked={val}
                                onChange={(e) =>
                                  setBehaviors({ ...behaviors, [key]: e.target.checked })
                                }
                              />
                              <label className="text-sm capitalize">{key.replace(/([A-Z])/g, ' $1')}</label>
                            </div>
                          )
                        }
                        return null
                      })}
                  </div>

                  {/* 'Other' Behavior Description */}
                  {behaviors.other && (
                    <textarea
                      className="mt-2 w-full border-gray-300 rounded-md"
                      rows={2}
                      placeholder="Describe other behavior..."
                      value={behaviors.otherDescription}
                      onChange={(e) =>
                        setBehaviors({ ...behaviors, otherDescription: e.target.value })
                      }
                    />
                  )}
                </div>

                {/* Activities Section */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">Activities and Engagement</label>
                  {Object.entries(activities).map(([activityName, data]) => (
                    <div key={activityName} className="mb-2 space-y-1">
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={data.participated}
                          onChange={(e) =>
                            setActivities({
                              ...activities,
                              [activityName]: {
                                ...data,
                                participated: e.target.checked,
                              },
                            })
                          }
                        />
                        <label className="text-sm">{activityName}</label>
                      </div>

                      {data.participated && (
                        <>
                          <label className="block text-xs font-medium text-gray-700">
                            Engagement (1-10)
                          </label>
                          <input
                            type="range"
                            min={1}
                            max={10}
                            className="w-full"
                            value={data.engagement}
                            onChange={(e) =>
                              setActivities({
                                ...activities,
                                [activityName]: {
                                  ...data,
                                  engagement: Number(e.target.value),
                                },
                              })
                            }
                          />
                          <p className="text-xs text-gray-500">Current: {data.engagement}/10</p>
                        </>
                      )}
                    </div>
                  ))}
                </div>

                {/* Social Interactions Section */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">Social Interactions</label>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-xs font-medium text-gray-700">Peer Interactions</label>
                      <select
                        className="w-full border-gray-300 rounded-md"
                        value={social.peer}
                        onChange={(e) => setSocial({ ...social, peer: e.target.value })}
                      >
                        <option>Appropriate</option>
                        <option>Inappropriate</option>
                        <option>Mixed</option>
                        <option>Isolated</option>
                        <option>Boundaries Issues</option>
                        <option>No Peer Contact</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-xs font-medium text-gray-700">Staff Interactions</label>
                      <select
                        className="w-full border-gray-300 rounded-md"
                        value={social.staff}
                        onChange={(e) => setSocial({ ...social, staff: e.target.value })}
                      >
                        <option>Appropriate</option>
                        <option>Inappropriate</option>
                        <option>Mixed</option>
                        <option>Avoidant</option>
                        <option>Oppositional</option>
                        <option>Seeking</option>
                      </select>
                    </div>
                  </div>

                  <label className="block text-xs font-medium text-gray-700 mt-2">
                    Overall Social Interaction Level (1-10)
                  </label>
                  <input
                    type="range"
                    min={0}
                    max={10}
                    className="w-full"
                    value={social.overallInteraction}
                    onChange={(e) =>
                      setSocial({ ...social, overallInteraction: Number(e.target.value) })
                    }
                  />
                  <p className="text-xs text-gray-500">Current: {social.overallInteraction}/10</p>
                </div>

                {/* Health and Safety Section */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">Health & Safety</label>
                  <div className="grid grid-cols-2 gap-2">
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={health.medicationsTaken}
                        onChange={(e) =>
                          setHealth({ ...health, medicationsTaken: e.target.checked })
                        }
                      />
                      <label className="text-sm">Medications Taken</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={health.sleepIssues}
                        onChange={(e) =>
                          setHealth({ ...health, sleepIssues: e.target.checked })
                        }
                      />
                      <label className="text-sm">Sleep Issues</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={health.appetiteIssues}
                        onChange={(e) =>
                          setHealth({ ...health, appetiteIssues: e.target.checked })
                        }
                      />
                      <label className="text-sm">Appetite Issues</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={health.physicalComplaints}
                        onChange={(e) =>
                          setHealth({ ...health, physicalComplaints: e.target.checked })
                        }
                      />
                      <label className="text-sm">Physical Complaints</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={health.hygieneIssues}
                        onChange={(e) =>
                          setHealth({ ...health, hygieneIssues: e.target.checked })
                        }
                      />
                      <label className="text-sm">Hygiene Issues</label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={health.safetyConcerns}
                        onChange={(e) =>
                          setHealth({ ...health, safetyConcerns: e.target.checked })
                        }
                      />
                      <label className="text-sm">Safety Concerns</label>
                    </div>
                  </div>

                  {/* Health Description */}
                  {(health.medicationsTaken ||
                    health.sleepIssues ||
                    health.appetiteIssues ||
                    health.physicalComplaints ||
                    health.hygieneIssues ||
                    health.safetyConcerns) && (
                    <textarea
                      className="mt-2 w-full border-gray-300 rounded-md"
                      rows={3}
                      placeholder="Describe the health and safety issues..."
                      value={health.healthDescription}
                      onChange={(e) =>
                        setHealth({ ...health, healthDescription: e.target.value })
                      }
                    />
                  )}
                </div>

                {/* Incidents Section */}
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={incidents.occurred}
                      onChange={(e) =>
                        setIncidents({ ...incidents, occurred: e.target.checked })
                      }
                    />
                    <label className="block text-sm font-medium text-gray-700">Incident Occurred</label>
                  </div>

                  {incidents.occurred && (
                    <>
                      <textarea
                        className="mt-2 w-full border-gray-300 rounded-md"
                        rows={3}
                        placeholder="Describe the incident..."
                        value={incidents.description}
                        onChange={(e) =>
                          setIncidents({ ...incidents, description: e.target.value })
                        }
                      />

                      <label className="block text-xs font-medium text-gray-700 mt-2">
                        Coping Skills Used
                      </label>
                      <div className="grid grid-cols-2 gap-2">
                        {Object.entries(incidents.copingSkillsUsed).map(([skill, val]) => (
                          <div key={skill} className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              checked={val}
                              onChange={(e) =>
                                setIncidents({
                                  ...incidents,
                                  copingSkillsUsed: {
                                    ...incidents.copingSkillsUsed,
                                    [skill]: e.target.checked,
                                  },
                                })
                              }
                            />
                            <label className="text-sm capitalize">
                              {skill.replace(/([A-Z])/g, ' $1')}
                            </label>
                          </div>
                        ))}
                      </div>

                      {/* 'Other' Coping Skill Description */}
                      {incidents.copingSkillsUsed.other && (
                        <textarea
                          className="mt-2 w-full border-gray-300 rounded-md"
                          rows={2}
                          placeholder="Describe other coping skill..."
                          value={incidents.otherCopingSkillDescription}
                          onChange={(e) =>
                            setIncidents({
                              ...incidents,
                              otherCopingSkillDescription: e.target.value,
                            })
                          }
                        />
                      )}

                      {/* Effectiveness Slider */}
                      <label className="block text-xs font-medium text-gray-700 mt-2">
                        Effectiveness of Coping Skills (1-10)
                      </label>
                      <input
                        type="range"
                        min={1}
                        max={10}
                        className="w-full"
                        value={incidents.effectiveness}
                        onChange={(e) =>
                          setIncidents({
                            ...incidents,
                            effectiveness: Number(e.target.value),
                          })
                        }
                      />
                      <p className="text-xs text-gray-500">
                        Current: {incidents.effectiveness}/10
                      </p>
                    </>
                  )}
                </div>

                {/* Additional Notes Section */}
                <div className="space-y-2">
                  <label className="block text-sm font-medium text-gray-700">Additional Notes</label>
                  <textarea
                    className="w-full border-gray-300 rounded-md"
                    rows={3}
                    placeholder="Enter any additional observations, incidents, or important information..."
                    value={additionalNotes}
                    onChange={(e) => setAdditionalNotes(e.target.value)}
                  />
                </div>

                {/* Generate & Reset Buttons */}
                <div className="flex space-x-4">
                  <button
                    onClick={handleGenerateNote}
                    className={`inline-flex items-center px-4 py-2 text-base font-medium rounded-md shadow-sm text-white ${
                      loading
                        ? 'bg-indigo-300 cursor-not-allowed'
                        : 'bg-indigo-600 hover:bg-indigo-700'
                    }`}
                    disabled={loading}
                  >
                    <MessageSquare className="mr-2 h-5 w-5" />
                    {loading ? 'Generating...' : 'Generate Note'}
                  </button>
                  <button
                    onClick={handleReset}
                    className={`inline-flex items-center px-4 py-2 text-base font-medium rounded-md shadow-sm text-gray-700 border border-gray-300 ${
                      loading
                        ? 'bg-gray-200 cursor-not-allowed'
                        : 'bg-white hover:bg-gray-50'
                    }`}
                    disabled={loading}
                  >
                    <RotateCcw className="mr-2 h-5 w-5" />
                    Reset
                  </button>
                </div>

                {/* Error Message */}
                {errorMsg && (
                  <p className="text-sm text-red-600 mt-2">Error: {errorMsg}</p>
                )}
              </div>

              {/* Right Column: Generated Note Preview */}
              <div className="bg-gray-50 p-6 rounded-lg flex flex-col">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-medium text-gray-900">Generated Note</h3>
                  <button
                    onClick={() => alert('Save functionality is not implemented in this demo.')}
                    className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200"
                  >
                    <Save className="mr-1.5 h-4 w-4" />
                    Save
                  </button>
                </div>
                <div className="prose max-w-none flex-1 overflow-auto">
                  {generatedNote ? (
                    <p className="text-gray-700 whitespace-pre-wrap">{generatedNote}</p>
                  ) : (
                    <p className="text-gray-500 italic">
                      Fill in the form on the left and click “Generate Note” to see an AI-powered
                      progress note.
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Demo

================
File: src/pages/features.tsx
================
// src/pages/features.tsx
import React from 'react';
import { Brain, Shield, Database, Layout, FileText, Users, BarChart, Settings } from 'lucide-react';

export default function Features() {
  const mainFeatures = [
    {
      icon: <Brain className="w-8 h-8" />,
      title: "AI-Powered Note Generation",
      description: "Our advanced AI understands clinical context and generates comprehensive progress notes that maintain professional standards while saving valuable time."
    },
    {
      icon: <Shield className="w-8 h-8" />,
      title: "HIPAA Compliant Security",
      description: "Enterprise-grade encryption and security measures ensure all patient data is protected according to healthcare compliance standards."
    },
    {
      icon: <FileText className="w-8 h-8" />,
      title: "Customizable Templates",
      description: "Create and customize note templates that match your specific clinical workflow and documentation requirements."
    }
  ];

  const additionalFeatures = [
    {
      icon: <Layout className="w-6 h-6" />,
      title: "Intuitive Interface",
      description: "Clean, modern interface designed specifically for healthcare professionals."
    },
    {
      icon: <Database className="w-6 h-6" />,
      title: "Secure Storage",
      description: "Encrypted cloud storage with automatic backups and easy retrieval."
    },
    {
      icon: <Users className="w-6 h-6" />,
      title: "Team Collaboration",
      description: "Share notes and collaborate with your healthcare team securely."
    },
    {
      icon: <BarChart className="w-6 h-6" />,
      title: "Progress Tracking",
      description: "Monitor patient progress with comprehensive analytics and reporting."
    },
    {
      icon: <Settings className="w-6 h-6" />,
      title: "Integration Ready",
      description: "Seamlessly integrate with existing EHR systems and healthcare platforms."
    }
  ];

  return (
    <div className="bg-white">
      {/* Hero Section */}
      <div className="relative bg-primary-800 py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="lg:text-center">
            <h1 className="text-4xl font-bold tracking-tight text-white sm:text-5xl lg:text-6xl">
              Powerful Features for Mental Health Professionals
            </h1>
            <p className="mt-4 text-xl text-primary-100">
              Everything you need to streamline your clinical documentation workflow.
            </p>
          </div>
        </div>
      </div>

      {/* Main Features */}
      <div className="py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 gap-12 lg:grid-cols-3">
            {mainFeatures.map((feature, index) => (
              <div key={index} className="relative">
                <div className="absolute h-16 w-16 flex items-center justify-center rounded-xl bg-primary-600 text-white">
                  {feature.icon}
                </div>
                <div className="ml-20">
                  <h3 className="text-xl font-semibold text-gray-900">{feature.title}</h3>
                  <p className="mt-2 text-base text-gray-500">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Additional Features Grid */}
      <div className="bg-gray-50 py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-gray-900">Additional Features</h2>
            <p className="mt-4 text-lg text-gray-500">
              Comprehensive tools to support your clinical practice
            </p>
          </div>
          <div className="mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {additionalFeatures.map((feature, index) => (
              <div key={index} className="bg-white rounded-lg shadow-sm p-6">
                <div className="text-primary-600">{feature.icon}</div>
                <h3 className="mt-4 text-lg font-medium text-gray-900">{feature.title}</h3>
                <p className="mt-2 text-base text-gray-500">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-primary-700">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
            <span className="block">Ready to get started?</span>
            <span className="block text-primary-200">Try FloNotes today.</span>
          </h2>
          <div className="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div className="inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-primary-600 bg-white hover:bg-primary-50"
              >
                Get Started
              </a>
            </div>
            <div className="ml-3 inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
              >
                Learn More
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/index.tsx
================
// src/pages/index.tsx
import React from 'react';
import Link from 'next/link';
import { Brain, Shield, Clock, ChartBar } from 'lucide-react';

export default function Home() {
  const features = [
    {
      icon: <Brain className="h-6 w-6" />,
      title: "AI-Powered Note Generation",
      description: "Generate comprehensive clinical notes in seconds with our advanced AI technology."
    },
    {
      icon: <Shield className="h-6 w-6" />,
      title: "HIPAA Compliant",
      description: "Enterprise-grade security ensuring your patient data remains protected and compliant."
    },
    {
      icon: <Clock className="h-6 w-6" />,
      title: "Save Time",
      description: "Reduce documentation time by up to 70% while maintaining clinical accuracy."
    },
    {
      icon: <ChartBar className="h-6 w-6" />,
      title: "Detailed Analytics",
      description: "Track patient progress and treatment outcomes with comprehensive analytics."
    }
  ];

  return (
    <div className="relative">
      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="max-w-7xl mx-auto">
          <div className="relative z-10 pb-8 bg-white sm:pb-16 md:pb-20 lg:pb-28 xl:pb-32">
            <main className="mt-10 mx-auto max-w-7xl px-4 sm:mt-12 sm:px-6 md:mt-16 lg:mt-20 lg:px-8 xl:mt-28">
              <div className="sm:text-center lg:text-left">
                <h1 className="text-4xl tracking-tight font-bold text-gray-900 sm:text-5xl md:text-6xl">
                  <span className="block">Transform Your Clinical</span>
                  <span className="block text-primary-600">Documentation Process</span>
                </h1>
                <p className="mt-3 text-base text-gray-500 sm:mt-5 sm:text-lg sm:max-w-xl sm:mx-auto md:mt-5 md:text-xl lg:mx-0">
                  FloNotes helps mental health professionals create comprehensive, accurate clinical documentation in less time.
                </p>
                <div className="mt-5 sm:mt-8 sm:flex sm:justify-center lg:justify-start">
                  <div className="rounded-md shadow">
                    <Link
                      href="/demo"
                      className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 md:py-4 md:text-lg md:px-10"
                    >
                      Get Started
                    </Link>
                  </div>
                  <div className="mt-3 sm:mt-0 sm:ml-3">
                    <Link
                      href="/features"
                      className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-primary-700 bg-primary-100 hover:bg-primary-200 md:py-4 md:text-lg md:px-10"
                    >
                      Learn More
                    </Link>
                  </div>
                </div>
              </div>
            </main>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div className="py-12 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="lg:text-center">
            <h2 className="text-base text-primary-600 font-semibold tracking-wide uppercase">
              Features
            </h2>
            <p className="mt-2 text-3xl leading-8 font-bold tracking-tight text-gray-900 sm:text-4xl">
              A Better Way to Document Patient Care
            </p>
            <p className="mt-4 max-w-2xl text-xl text-gray-500 lg:mx-auto">
              Designed specifically for mental health professionals, FloNotes combines clinical expertise with cutting-edge technology.
            </p>
          </div>

          <div className="mt-10">
            <div className="grid grid-cols-1 gap-10 sm:grid-cols-2 lg:grid-cols-4">
              {features.map((feature, index) => (
                <div key={index} className="relative">
                  <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-primary-500 text-white">
                    {feature.icon}
                  </div>
                  <p className="ml-16 text-lg leading-6 font-medium text-gray-900">
                    {feature.title}
                  </p>
                  <p className="mt-2 ml-16 text-base text-gray-500">
                    {feature.description}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/pricing.tsx
================
// src/pages/pricing.tsx
import React, { useState } from 'react';
import { Check } from 'lucide-react';

interface PriceTier {
  name: string;
  id: string;
  href: string;
  price: {
    monthly: number | string;
    annual: number | string;
  };
  description: string;
  features: string[];
  mostPopular: boolean;
}

interface FAQ {
  question: string;
  answer: string;
}

export default function Pricing() {
  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'annual'>('monthly');

  const tiers: PriceTier[] = [
    {
      name: 'Starter',
      id: 'tier-starter',
      href: '#',
      price: { monthly: 49, annual: 39 },
      description: 'Perfect for individual practitioners',
      features: [
        'Up to 50 notes per month',
        'Basic note templates',
        'Standard security features',
        'Email support',
        'Basic analytics',
      ],
      mostPopular: false,
    },
    {
      name: 'Professional',
      id: 'tier-professional',
      href: '#',
      price: { monthly: 79, annual: 69 },
      description: 'Ideal for growing practices',
      features: [
        'Unlimited notes',
        'Custom templates',
        'Advanced security features',
        'Priority support',
        'Advanced analytics',
        'Team collaboration',
        'API access',
      ],
      mostPopular: true,
    },
    {
      name: 'Enterprise',
      id: 'tier-enterprise',
      href: '#',
      price: { monthly: 'Custom', annual: 'Custom' },
      description: 'For large healthcare organizations',
      features: [
        'Everything in Professional',
        'Custom integrations',
        'Dedicated support',
        'Custom security controls',
        'SLA guarantees',
        'Custom training',
        'On-premise deployment option',
      ],
      mostPopular: false,
    },
  ];

  const faqs: FAQ[] = [
    {
      question: 'How does billing work?',
      answer: 'You will be billed monthly or annually depending on your preference. All plans come with a 14-day free trial.'
    },
    {
      question: 'Can I switch plans later?',
      answer: 'Yes, you can upgrade or downgrade your plan at any time. The changes will be reflected in your next billing cycle.'
    },
    {
      question: 'What happens if I exceed my note limit?',
      answer: 'On the Starter plan, you will be notified when approaching your limit. You can upgrade to Professional for unlimited notes.'
    },
    {
      question: 'Do you offer refunds?',
      answer: 'Yes, we offer a 30-day money-back guarantee if you are not satisfied with our service.'
    },
    {
      question: 'What kind of support do you offer?',
      answer: 'All plans include email support. Professional and Enterprise plans include priority support with faster response times.'
    },
    {
      question: 'Is there a contract or commitment?',
      answer: 'No long-term contracts required. You can cancel your subscription at any time.'
    }
  ];

  return (
    <div className="bg-gray-50">
      {/* Header */}
      <div className="bg-primary-900">
        <div className="pt-12 sm:pt-16 lg:pt-24">
          <div className="max-w-7xl mx-auto text-center px-4 sm:px-6 lg:px-8">
            <div className="max-w-3xl mx-auto space-y-2 lg:max-w-none">
              <h1 className="text-lg leading-6 font-semibold text-gray-300">
                Pricing
              </h1>
              <p className="text-3xl font-bold text-white sm:text-4xl lg:text-5xl">
                The right price for your practice
              </p>
              <p className="text-xl text-gray-300">
                Choose the plan that best fits your needs
              </p>
            </div>
          </div>

          {/* Billing Toggle */}
          <div className="mt-8 flex justify-center">
            <div className="relative self-center bg-gray-800 rounded-lg p-0.5 flex sm:mt-8">
              <button
                type="button"
                className={`relative w-32 rounded-md py-2 text-sm font-medium whitespace-nowrap focus:outline-none focus:z-10 sm:w-40 sm:px-8 ${
                  billingPeriod === 'monthly'
                    ? 'bg-primary-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
                onClick={() => setBillingPeriod('monthly')}
              >
                Monthly billing
              </button>
              <button
                type="button"
                className={`relative w-32 rounded-md py-2 text-sm font-medium whitespace-nowrap focus:outline-none focus:z-10 sm:w-40 sm:px-8 ${
                  billingPeriod === 'annual'
                    ? 'bg-primary-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
                onClick={() => setBillingPeriod('annual')}
              >
                Annual billing
              </button>
            </div>
          </div>
        </div>

        <div className="mt-8 pb-12 bg-gray-50 sm:mt-12 sm:pb-16 lg:mt-16 lg:pb-24">
          <div className="relative">
            <div className="absolute inset-0 h-3/4 bg-primary-900" />
            <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="max-w-md mx-auto grid gap-8 lg:max-w-5xl lg:grid-cols-3">
                {tiers.map((tier) => (
                  <div
                    key={tier.id}
                    className={`flex flex-col rounded-lg shadow-lg overflow-hidden transform transition-all duration-200 ${
                      tier.mostPopular
                        ? 'ring-2 ring-primary-500 scale-105'
                        : 'ring-1 ring-gray-200 hover:scale-105'
                    }`}
                  >
                    <div className="px-6 py-8 bg-white">
                      <div>
                        <h3
                          className="text-2xl font-semibold text-gray-900 text-center"
                          id={tier.id}
                        >
                          {tier.name}
                        </h3>
                        <div className="mt-4 flex justify-center">
                          <span className="px-4 py-1 rounded-full text-sm font-semibold bg-primary-100 text-primary-800">
                            {tier.description}
                          </span>
                        </div>
                        <p className="mt-8 text-center">
                          <span className="text-4xl font-bold text-gray-900">
                            ${typeof tier.price[billingPeriod] === 'number' ? tier.price[billingPeriod] : ''}
                          </span>
                          {typeof tier.price[billingPeriod] === 'number' && (
                            <span className="text-base font-medium text-gray-500">
                              /{billingPeriod === 'monthly' ? 'month' : 'mo annually'}
                            </span>
                          )}
                          {typeof tier.price[billingPeriod] === 'string' && (
                            <span className="text-xl font-medium text-gray-500">
                              {tier.price[billingPeriod]}
                            </span>
                          )}
                        </p>
                      </div>
                    </div>
                    <div className="flex-1 flex flex-col justify-between px-6 pt-6 pb-8 bg-gray-50 space-y-6 sm:p-10">
                      <ul className="space-y-4">
                        {tier.features.map((feature, index) => (
                          <li key={index} className="flex items-start">
                            <div className="flex-shrink-0">
                              <Check className="h-6 w-6 text-green-500" />
                            </div>
                            <p className="ml-3 text-base text-gray-700">{feature}</p>
                          </li>
                        ))}
                      </ul>
                      <a
                        href={tier.href}
                        className={`block w-full text-center rounded-md px-4 py-2 text-sm font-semibold transition-colors duration-200 ${
                          tier.mostPopular
                            ? 'bg-primary-500 text-white hover:bg-primary-600'
                            : 'bg-primary-50 text-primary-700 hover:bg-primary-100'
                        }`}
                      >
                        Get started
                      </a>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="max-w-7xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-3xl mx-auto text-center">
          <h2 className="text-3xl font-bold text-gray-900">Frequently asked questions</h2>
          <p className="mt-4 text-lg text-gray-500">
            Can&apos;t find the answer you&apos;re looking for? Contact our support team.
          </p>
        </div>
        <div className="mt-12 grid gap-8 lg:grid-cols-2">
          {faqs.map((faq, index) => (
            <div key={index} className="bg-white rounded-lg shadow-sm p-8 hover:shadow-md transition-shadow duration-200">
              <div className="text-lg leading-6 font-medium text-gray-900">
                {faq.question}
              </div>
              <div className="mt-2 text-base text-gray-500">
                {faq.answer}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-primary-700">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
            <span className="block">Ready to get started?</span>
            <span className="block text-primary-200">Start your free trial today.</span>
          </h2>
          <div className="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div className="inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-primary-600 bg-white hover:bg-primary-50 transition-colors duration-200"
              >
                Get started
              </a>
            </div>
            <div className="ml-3 inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 transition-colors duration-200"
              >
                Learn more
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/technical-specs.tsx
================
// src/pages/technical-specs.tsx
import React, { useState } from 'react';
import { Shield, Laptop, Network, Settings, Download } from 'lucide-react';

interface Specification {
  title: string;
  details: string[];
}

interface SpecificationSection {
  icon: React.ReactNode;
  title: string;
  specs: Specification[];
}

interface Specifications {
  [key: string]: SpecificationSection;
}

export default function TechnicalSpecs() {
  const [expandedSection, setExpandedSection] = useState<string | null>('system');

  const specifications: Specifications = {
    system: {
      icon: <Laptop className="h-6 w-6" />,
      title: 'System Requirements',
      specs: [
        {
          title: 'Supported Platforms',
          details: [
            'Web-based application compatible with modern browsers',
            'Chrome 80+',
            'Firefox 75+',
            'Safari 13+',
            'Edge 80+',
          ]
        },
        {
          title: 'Hardware Requirements',
          details: [
            'Minimum 4GB RAM',
            'Stable internet connection (5+ Mbps)',
            'Display resolution: 1280x720 or higher',
          ]
        },
      ]
    },
    security: {
      icon: <Shield className="h-6 w-6" />,
      title: 'Security Features',
      specs: [
        {
          title: 'Data Protection',
          details: [
            'AES-256 encryption at rest',
            'TLS 1.3 encryption in transit',
            'Multi-factor authentication',
            'Role-based access control',
          ]
        },
        {
          title: 'Compliance',
          details: [
            'HIPAA compliance',
            'HITECH Act compliance',
            'SOC 2 Type II certified',
            'Regular security audits',
          ]
        },
      ]
    },
    integration: {
      icon: <Network className="h-6 w-6" />,
      title: 'Integration Capabilities',
      specs: [
        {
          title: 'Healthcare Standards',
          details: [
            'HL7 FHIR R4 compatible',
            'SMART on FHIR enabled',
            'CDA document support',
            'ICD-10 coding system',
          ]
        },
        {
          title: 'API Features',
          details: [
            'RESTful API architecture',
            'OAuth 2.0 authentication',
            'Webhook support',
            'Rate limiting and monitoring',
          ]
        },
      ]
    },
    performance: {
      icon: <Settings className="h-6 w-6" />,
      title: 'Performance Specifications',
      specs: [
        {
          title: 'Response Times',
          details: [
            'Note generation: < 2 seconds',
            'Search queries: < 500ms',
            'Document loading: < 1 second',
            '99.9% uptime SLA',
          ]
        },
        {
          title: 'Scalability',
          details: [
            'Concurrent users: 10,000+',
            'Automatic horizontal scaling',
            'Load balancing enabled',
            'CDN integration',
          ]
        },
      ]
    },
  };

  const handleSectionToggle = (sectionKey: string) => {
    setExpandedSection(expandedSection === sectionKey ? null : sectionKey);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="bg-white">
        <div className="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl md:text-6xl">
              Technical Specifications
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-gray-500 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              Detailed information about FloNotes&apos; technical capabilities and requirements
            </p>
          </div>
        </div>
      </div>

      {/* Specs Content */}
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
          {Object.entries(specifications).map(([key, section]) => (
            <div
              key={key}
              className="bg-white rounded-lg shadow-lg overflow-hidden"
            >
              <div
                className="p-6 cursor-pointer hover:bg-gray-50 transition-colors duration-150"
                onClick={() => handleSectionToggle(key)}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="h-12 w-12 bg-primary-50 rounded-md flex items-center justify-center text-primary-600">
                        {section.icon}
                      </div>
                    </div>
                    <div className="ml-4">
                      <h3 className="text-lg font-medium text-gray-900">
                        {section.title}
                      </h3>
                    </div>
                  </div>
                  <div className={`transform transition-transform duration-200 ${
                    expandedSection === key ? 'rotate-180' : ''
                  }`}>
                    <svg className="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </div>
              </div>

              {expandedSection === key && (
                <div className="px-6 pb-6 space-y-6">
                  {section.specs.map((spec, index) => (
                    <div key={index} className="border-t pt-6 first:border-t-0 first:pt-0">
                      <h4 className="text-sm font-medium text-gray-900">
                        {spec.title}
                      </h4>
                      <ul className="mt-3 space-y-3">
                        {spec.details.map((detail, i) => (
                          <li key={i} className="text-sm text-gray-500 flex items-start">
                            <svg
                              className="h-5 w-5 text-green-400 mr-2 flex-shrink-0"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M5 13l4 4L19 7"
                              />
                            </svg>
                            {detail}
                          </li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Download Section */}
        <div className="mt-16">
          <div className="bg-primary-50 rounded-lg shadow-sm overflow-hidden">
            <div className="px-6 py-8 sm:p-10">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium text-primary-900">
                    Technical Documentation
                  </h3>
                  <p className="mt-2 text-sm text-primary-700">
                    Download detailed technical specifications and integration guides
                  </p>
                </div>
                <div className="ml-4">
                  <button 
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-primary-700 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-150"
                    onClick={() => window.open('/docs/technical-specs.pdf', '_blank')}
                  >
                    <Download className="mr-2 h-5 w-5" />
                    Download Specs
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
        primary: {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1', // Primary brand color
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
        }
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true, // Added
    "module": "esnext",
    "moduleResolution": "node", // Changed from "bundler" to "node"
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
