This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-28T04:44:53.997Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.mjs
netlify.toml
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/components/layout/Footer.tsx
src/components/layout/Header.tsx
src/components/layout/Layout.tsx
src/components/layout/Navigation.tsx
src/pages/_app.tsx
src/pages/_document.tsx
src/pages/api/generateNote.ts
src/pages/api/hello.ts
src/pages/contact.tsx
src/pages/demo.tsx
src/pages/features.tsx
src/pages/index.tsx
src/pages/pricing.tsx
src/pages/technical-specs.tsx
src/styles/globals.css
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: netlify.toml
================
[build]
  command = "npm run build"
  publish = ".next"
  functions = "netlify/functions"

[[plugins]]
  package = "@netlify/plugin-nextjs"

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  reactStrictMode: true,
};

export default nextConfig;

================
File: package.json
================
{
  "name": "flonotes-website",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.0",
    "@hookform/resolvers": "^3.9.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^11.15.0",
    "lucide-react": "^0.469.0",
    "next": "15.1.3",
    "openai": "^4.77.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "tailwind-merge": "^2.6.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@netlify/plugin-nextjs": "^5.9.2",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/pages/api-reference/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn-pages-router) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/pages/building-your-application/deploying) for more details.

================
File: src/components/layout/Footer.tsx
================
// src/components/layout/Footer.tsx
import React from 'react';
import Link from 'next/link';

const Footer: React.FC = () => {
  const footerSections = [
    {
      title: 'Product',
      links: [
        { name: 'Features', href: '/features' },
        { name: 'Demo', href: '/demo' },
        { name: 'Pricing', href: '/pricing' },
        { name: 'Technical Specs', href: '/technical-specs' },
      ],
    },
    {
      title: 'Support',
      links: [
        { name: 'Documentation', href: '#' },
        { name: 'Guides', href: '#' },
        { name: 'API Reference', href: '#' },
        { name: 'Contact', href: '/contact' },
      ],
    },
    {
      title: 'Company',
      links: [
        { name: 'About', href: '#' },
        { name: 'Blog', href: '#' },
        { name: 'Careers', href: '#' },
        { name: 'Legal', href: '#' },
      ],
    },
  ];

  return (
    <footer className="bg-white border-t border-gray-200">
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-2 gap-8 md:grid-cols-4">
          <div className="col-span-2 md:col-span-1">
            <Link href="/" className="flex items-center">
              <span className="text-xl font-bold text-primary-600">FloNotes</span>
            </Link>
            <p className="mt-4 text-sm text-gray-500">
              Advanced progress note generation for mental health professionals.
            </p>
          </div>
          
          {footerSections.map((section) => (
            <div key={section.title}>
              <h3 className="text-sm font-semibold text-gray-400 tracking-wider uppercase">
                {section.title}
              </h3>
              <ul className="mt-4 space-y-4">
                {section.links.map((link) => (
                  <li key={link.name}>
                    <Link
                      href={link.href}
                      className="text-base text-gray-500 hover:text-gray-900"
                    >
                      {link.name}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        
        <div className="mt-8 border-t border-gray-200 pt-8">
          <p className="text-base text-gray-400 text-center">
            &copy; {new Date().getFullYear()} FloNotes. All rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

================
File: src/components/layout/Header.tsx
================
import React, { useState } from 'react';
import Link from 'next/link';
import { Menu, X } from 'lucide-react';
import Navigation from './Navigation';

const Header: React.FC = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  return (
    <header className="bg-white border-b border-gray-200">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <Link href="/" className="flex-shrink-0 flex items-center">
              <span className="text-2xl font-bold text-primary-600">FloNotes</span>
            </Link>
          </div>
          
          <Navigation className="hidden md:flex" />
          
          <div className="flex items-center md:hidden">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100"
            >
              {isMobileMenuOpen ? (
                <X className="block h-6 w-6" />
              ) : (
                <Menu className="block h-6 w-6" />
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      {isMobileMenuOpen && (
        <div className="md:hidden">
          <Navigation mobile />
        </div>
      )}
    </header>
  );
};

export default Header;

================
File: src/components/layout/Layout.tsx
================
import React from 'react';
import Header from './Header';
import Footer from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">{children}</main>
      <Footer />
    </div>
  );
};

export default Layout;

================
File: src/components/layout/Navigation.tsx
================
// src/components/layout/Navigation.tsx
import React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';


interface NavigationProps {
  mobile?: boolean;
  className?: string;
}

const Navigation: React.FC<NavigationProps> = ({ mobile, className }) => {
  const router = useRouter();
  
  const navItems = [
    { name: 'Features', href: '/features' },
    { name: 'Demo', href: '/demo' },
    { name: 'Technical Specs', href: '/technical-specs' },
    { name: 'Pricing', href: '/pricing' },
    { name: 'Contact', href: '/contact' },
  ];

  const baseStyles = mobile
    ? 'space-y-1 px-2 pb-3 pt-2'
    : 'ml-10 flex items-center space-x-4';

  return (
    <nav className={`${baseStyles} ${className || ''}`}>
      {navItems.map((item) => {
        const isActive = router.pathname === item.href;
        const linkStyles = mobile
          ? `block px-3 py-2 rounded-md text-base font-medium ${
              isActive
                ? 'text-primary-600 bg-primary-50'
                : 'text-gray-700 hover:text-primary-600 hover:bg-primary-50'
            }`
          : `px-3 py-2 rounded-md text-sm font-medium ${
              isActive
                ? 'text-primary-600'
                : 'text-gray-700 hover:text-primary-600'
            }`;

        return (
          <Link
            key={item.name}
            href={item.href}
            className={linkStyles}
          >
            {item.name}
          </Link>
        );
      })}
      
      <Link
        href="#"
        className={`${
          mobile
            ? 'block px-3 py-2 rounded-md text-base font-medium'
            : 'ml-8 inline-flex items-center'
        } px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700`}
      >
        Sign In
      </Link>
    </nav>
  );
};

export default Navigation;

================
File: src/pages/_app.tsx
================
// src/pages/_app.tsx
import "@/styles/globals.css";
import type { AppProps } from "next/app";
import Layout from "@/components/layout/Layout";

export default function App({ Component, pageProps }: AppProps) {
  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

================
File: src/pages/_document.tsx
================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

================
File: src/pages/api/generateNote.ts
================
// src/pages/api/generateNote.ts

import type { NextApiRequest, NextApiResponse } from 'next';
import { OpenAI } from 'openai';

// Initialize OpenAI with your API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { prompt } = req.body;

  if (!prompt || typeof prompt !== 'string') {
    return res.status(400).json({ error: 'Invalid prompt' });
  }

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `
You are an experienced clinician generating progress notes.
Use a single, cohesive paragraph in the third person.
Focus on observed behaviors and significant changes without referencing numerical scores.
Employ qualitative descriptors to convey intensity and engagement levels.
Conclude with one key clinical insight or recommendation.
Keep the note between 150-200 words.
Avoid bullet points and ensure the narrative flows naturally.
          `,
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 400, // Adjusted to control the length
      temperature: 0.7, // Balanced creativity and coherence
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });

    const generatedNote = response.choices[0]?.message?.content?.trim();

    if (!generatedNote) {
      throw new Error('No content generated by OpenAI');
    }

    res.status(200).json({ generatedNote });
  } catch (error: unknown) {
    console.error('Error generating note:', error);
    res.status(500).json({ error: 'Failed to generate note' });
  }
}

================
File: src/pages/api/hello.ts
================
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  name: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>,
) {
  res.status(200).json({ name: "John Doe" });
}

================
File: src/pages/contact.tsx
================
import React, { useState } from 'react';
import { Phone, Mail, Clock, MapPin, Send, AlertCircle, Check } from 'lucide-react';
import { FormEvent, ChangeEvent } from 'react';

export default function Contact() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: '',
  });
  
  const [formStatus, setFormStatus] = useState({
    isSubmitting: false,
    isSubmitted: false,
    error: null,
  });

  const contactMethods = [
    {
      icon: <Mail className="h-6 w-6" />,
      name: 'Email Us',
      description: 'We aim to respond within 24 hours',
      contact: 'support@flonotes.com',
      href: 'mailto:support@flonotes.com',
    },
    {
      icon: <Phone className="h-6 w-6" />,
      name: 'Call Us',
      description: 'Mon-Fri from 8am to 5pm',
      contact: '(555) 123-4567',
      href: 'tel:+15551234567',
    },
    {
      icon: <MapPin className="h-6 w-6" />,
      name: 'Office',
      description: 'Come say hello',
      contact: '123 Health Tech Drive, Boston, MA 02110',
    },
    {
      icon: <Clock className="h-6 w-6" />,
      name: 'Business Hours',
      description: 'Working hours',
      contact: 'Monday to Friday, 9AM to 5PM EST',
    },
  ];

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setFormStatus({ ...formStatus, isSubmitting: true });
    
    // Simulated form submission delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setFormStatus({
      isSubmitting: false,
      isSubmitted: true,
      error: null,
    });
    setFormData({ name: '', email: '', subject: '', message: '' });
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="relative bg-primary-800 py-16 sm:py-24">
        <div className="max-w-md mx-auto text-center px-4 sm:max-w-3xl sm:px-6 lg:max-w-7xl lg:px-8">
          <h1 className="text-4xl font-extrabold text-white tracking-tight sm:text-5xl">
            Get in Touch
          </h1>
          <p className="mt-6 max-w-3xl mx-auto text-xl text-primary-100">
            Have questions about FloNotes? We're here to help.
          </p>
        </div>
      </div>

      {/* Contact Methods Grid */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="relative -mt-12 lg:-mt-24">
          <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
            {contactMethods.map((method) => (
              <div
                key={method.name}
                className="bg-white rounded-lg shadow-lg overflow-hidden transform hover:scale-105 transition-transform duration-200"
              >
                <div className="px-6 py-8">
                  <div className="text-primary-600 mb-4">{method.icon}</div>
                  <h3 className="text-xl font-medium text-gray-900">{method.name}</h3>
                  <p className="mt-2 text-sm text-gray-500">{method.description}</p>
                  {method.href ? (
                    <a
                      href={method.href}
                      className="mt-3 block text-base text-primary-600 hover:text-primary-500"
                    >
                      {method.contact}
                    </a>
                  ) : (
                    <p className="mt-3 text-base text-gray-900">{method.contact}</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Contact Form Section */}
        <div className="mt-16 mb-16">
          <div className="max-w-lg mx-auto bg-white rounded-xl shadow-lg overflow-hidden lg:max-w-none lg:grid lg:grid-cols-2">
            <div className="px-6 py-12 lg:p-12 bg-primary-700">
              <h3 className="text-2xl font-extrabold text-white">
                Send us a message
              </h3>
              <p className="mt-4 text-lg text-primary-100">
                Fill out the form and our team will get back to you within 24 hours.
              </p>
              <div className="mt-8">
                <dl className="space-y-6">
                  {contactMethods.map((method) => (
                    <div key={method.name} className="flex items-start">
                      <div className="flex-shrink-0">
                        <div className="text-primary-200">{method.icon}</div>
                      </div>
                      <div className="ml-4">
                        <dt className="text-sm font-medium text-primary-200">
                          {method.description}
                        </dt>
                        <dd className="mt-1 text-base text-white">
                          {method.contact}
                        </dd>
                      </div>
                    </div>
                  ))}
                </dl>
              </div>
            </div>
            <div className="px-6 py-12 lg:p-12">
              {formStatus.isSubmitted ? (
                <div className="h-full flex items-center justify-center">
                  <div className="text-center">
                    <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                      <Check className="h-6 w-6 text-green-600" />
                    </div>
                    <h3 className="mt-4 text-lg font-medium text-gray-900">Thanks for reaching out!</h3>
                    <p className="mt-2 text-sm text-gray-500">
                      We'll get back to you as soon as possible.
                    </p>
                    <button
                      onClick={() => setFormStatus(prev => ({ ...prev, isSubmitted: false }))}
                      className="mt-6 text-primary-600 hover:text-primary-500"
                    >
                      Send another message
                    </button>
                  </div>
                </div>
              ) : (
                <form onSubmit={handleSubmit} className="space-y-8">
                  <div className="bg-blue-50 p-4 rounded-lg mb-6">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <AlertCircle className="h-5 w-5 text-blue-400" aria-hidden="true" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-blue-700">
                          All fields are required. We typically respond within 24 hours.
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-6">
                    <div>
                      <label htmlFor="name" className="block text-sm font-semibold text-gray-900 mb-1">
                        Full Name
                        <span className="text-red-500 ml-1">*</span>
                      </label>
                      <div className="relative">
                        <input
                          type="text"
                          name="name"
                          id="name"
                          required
                          placeholder="John Doe"
                          value={formData.name}
                          onChange={handleInputChange}
                          className="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors duration-200"
                        />
                      </div>
                    </div>

                    <div>
                      <label htmlFor="email" className="block text-sm font-semibold text-gray-900 mb-1">
                        Email Address
                        <span className="text-red-500 ml-1">*</span>
                      </label>
                      <div className="relative">
                        <input
                          type="email"
                          name="email"
                          id="email"
                          required
                          placeholder="john@example.com"
                          value={formData.email}
                          onChange={handleInputChange}
                          className="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors duration-200"
                        />
                        <div className="mt-1 text-xs text-gray-500">
                          We'll never share your email with anyone else.
                        </div>
                      </div>
                    </div>

                    <div>
                      <label htmlFor="subject" className="block text-sm font-semibold text-gray-900 mb-1">
                        Subject
                        <span className="text-red-500 ml-1">*</span>
                      </label>
                      <select
                        name="subject"
                        id="subject"
                        required
                        value={formData.subject}
                        onChange={handleInputChange}
                        className="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors duration-200"
                      >
                        <option value="">Select a subject</option>
                        <option value="Sales Inquiry">Sales Inquiry</option>
                        <option value="Technical Support">Technical Support</option>
                        <option value="Feature Request">Feature Request</option>
                        <option value="Partnership">Partnership</option>
                        <option value="Other">Other</option>
                      </select>
                    </div>

                    <div>
                      <label htmlFor="message" className="block text-sm font-semibold text-gray-900 mb-1">
                        Message
                        <span className="text-red-500 ml-1">*</span>
                      </label>
                      <div className="relative">
                        <textarea
                          id="message"
                          name="message"
                          rows={5}
                          required
                          placeholder="How can we help you?"
                          value={formData.message}
                          onChange={handleInputChange}
                          className="mt-1 block w-full px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500 sm:text-sm transition-colors duration-200"
                        />
                        <div className="mt-1 text-xs text-gray-500">
                          Please provide as much detail as possible.
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="pt-4">
                    <button
                      type="submit"
                      disabled={formStatus.isSubmitting}
                      className={`w-full flex justify-center items-center py-4 px-6 border border-transparent rounded-lg text-base font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200 ${
                        formStatus.isSubmitting ? 'opacity-75 cursor-not-allowed' : ''
                      }`}
                    >
                      {formStatus.isSubmitting ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Sending Message...
                        </>
                      ) : (
                        <>
                          <Send className="h-5 w-5 mr-2" />
                          Send Message
                        </>
                      )}
                    </button>
                  </div>
                </form>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="bg-white">
        <div className="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8">
          <h2 className="text-3xl font-extrabold text-gray-900 text-center mb-12">
            Frequently Asked Questions
          </h2>
          <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
            {[
              {
                question: "What are your support hours?",
                answer: "Our support team is available Monday through Friday, 9AM to 5PM EST. For urgent issues, we provide 24/7 emergency support for our enterprise customers."
              },
              {
                question: "How quickly can I expect a response?",
                answer: "We aim to respond to all inquiries within 24 hours during business days. Enterprise customers receive priority support with guaranteed response times."
              },
              {
                question: "Do you offer on-site training?",
                answer: "Yes, we offer on-site training and implementation services for enterprise customers. Contact our sales team to learn more about our training programs."
              },
              {
                question: "How can I request a demo?",
                answer: "You can request a demo by filling out the contact form above or emailing us directly at demo@flonotes.com. We'll schedule a personalized demonstration of our platform."
              }
            ].map((faq, index) => (
              <div key={index} className="bg-gray-50 rounded-lg p-6 hover:bg-gray-100 transition-colors duration-200">
                <h3 className="text-lg font-medium text-gray-900">{faq.question}</h3>
                <p className="mt-2 text-base text-gray-500">{faq.answer}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/demo.tsx
================
import React, { useState } from 'react';
import {
  MessageSquare,
  RotateCcw,
  Save,
  HelpCircle,
} from 'lucide-react';

/**
 * Interfaces defining the state structure for each section of the form.
 */
interface MoodState {
  primary: string;
  intensity: number;
  hasSecondary: boolean;
  secondary: string;
  secondaryIntensity: number;
}

interface BehaviorsState {
  cooperative: boolean;
  followingRules: boolean;
  respectful: boolean;
  disruptive: boolean;
  withdrawn: boolean;
  aggressive: boolean;
  impulsive: boolean;
  other: boolean;
  otherDescription: string;
}

interface ActivityState {
  participated: boolean;
  engagement: number;
}

/**
 * To remove the `any` cast on `engagementDescriptor`, we define
 * a new Activity interface that extends ActivityState.
 */
interface TransformedActivityState extends ActivityState {
  engagementDescriptor: string;
}

interface SocialState {
  peer: string;
  staff: string;
  overallInteraction: number;
}

interface HealthState {
  medicationsTaken: boolean;
  sleepIssues: boolean;
  appetiteIssues: boolean;
  physicalComplaints: boolean;
  hygieneIssues: boolean;
  safetyConcerns: boolean;
  healthDescription: string;
}

interface IncidentsState {
  occurred: boolean;
  description: string;
  copingSkillsUsed: {
    deepBreathing: boolean;
    mindfulness: boolean;
    distraction: boolean;
    journaling: boolean;
    physicalActivity: boolean;
    talkingToStaff: boolean;
    other: boolean;
  };
  otherCopingSkillDescription: string;
  effectiveness: number;
}

const Demo = () => {
  // -------------------------------
  // 1) State Hooks for Each Section
  // -------------------------------
  const [mood, setMood] = useState<MoodState>({
    primary: 'Stable',
    intensity: 5,
    hasSecondary: false,
    secondary: 'Anxious',
    secondaryIntensity: 5,
  });

  const [behaviors, setBehaviors] = useState<BehaviorsState>({
    cooperative: false,
    followingRules: false,
    respectful: false,
    disruptive: false,
    withdrawn: false,
    aggressive: false,
    impulsive: false,
    other: false,
    otherDescription: '',
  });

  // Note: Our original `activities` remains typed as ActivityState.
  const [activities, setActivities] = useState<Record<string, ActivityState>>({
    'Group Therapy': { participated: false, engagement: 5 },
    'Individual Therapy': { participated: false, engagement: 5 },
    'Recreational Activities': { participated: false, engagement: 5 },
    'Skill Building Groups': { participated: false, engagement: 5 },
  });

  const [social, setSocial] = useState<SocialState>({
    peer: 'Appropriate',
    staff: 'Appropriate',
    overallInteraction: 5,
  });

  const [health, setHealth] = useState<HealthState>({
    medicationsTaken: false,
    sleepIssues: false,
    appetiteIssues: false,
    physicalComplaints: false,
    hygieneIssues: false,
    safetyConcerns: false,
    healthDescription: '',
  });

  const [incidents, setIncidents] = useState<IncidentsState>({
    occurred: false,
    description: '',
    copingSkillsUsed: {
      deepBreathing: false,
      mindfulness: false,
      distraction: false,
      journaling: false,
      physicalActivity: false,
      talkingToStaff: false,
      other: false,
    },
    otherCopingSkillDescription: '',
    effectiveness: 5,
  });

  const [additionalNotes, setAdditionalNotes] = useState<string>('');

  // -------------------------------
  // 2) Generated Note and Status States
  // -------------------------------
  const [generatedNote, setGeneratedNote] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  // Save Modal State
  const [saveModalOpen, setSaveModalOpen] = useState(false);

  // -------------------------------
  // 3) Utility Functions
  // -------------------------------
  const mapScoreToDescriptor = (score: number): string => {
    if (score >= 1 && score <= 3) return 'mild';
    if (score >= 4 && score <= 6) return 'moderate';
    if (score >= 7 && score <= 10) return 'severe';
    return 'unknown';
  };

  /**
   * Collect all form data into a single object.
   */
  function collectFormData() {
    return {
      mood,
      behaviors,
      activities,
      social,
      health,
      incidents,
      additionalNotes,
    };
  }

  /**
   * Transform the raw data into a type-safe structure with
   * additional descriptors (e.g., `engagementDescriptor`).
   */
  const transformData = (data: ReturnType<typeof collectFormData>) => {
    // Build typed activities object
    const transformedActivities: Record<string, TransformedActivityState> =
      Object.fromEntries(
        Object.entries(data.activities).map(([key, val]) => {
          const engagementDescriptor = mapScoreToDescriptor(val.engagement);
          return [
            key,
            { ...val, engagementDescriptor } as TransformedActivityState,
          ];
        })
      );

    const transformed = {
      mood: {
        ...data.mood,
        intensityDescriptor: mapScoreToDescriptor(data.mood.intensity),
        secondaryIntensityDescriptor: data.mood.hasSecondary
          ? mapScoreToDescriptor(data.mood.secondaryIntensity)
          : null,
      },
      behaviors: { ...data.behaviors },
      activities: transformedActivities, // <-- Now fully typed
      social: {
        ...data.social,
        overallInteractionDescriptor: mapScoreToDescriptor(
          data.social.overallInteraction
        ),
      },
      health: { ...data.health },
      incidents: {
        ...data.incidents,
        effectivenessDescriptor: mapScoreToDescriptor(
          data.incidents.effectiveness
        ),
      },
      additionalNotes: data.additionalNotes,
    };

    return transformed;
  };

  /**
   * Creates a prompt for the AI model based on transformed data.
   */
  function createAiPrompt(
    data: ReturnType<typeof transformData> // typed transformation
  ) {
    const { mood, behaviors, activities, social, health, incidents, additionalNotes } = data;

    let prompt = `The following information was collected from a mental health session:\n\n`;

    // Mood
    prompt += `Mood: ${mood.primary} (Intensity: ${mood.intensityDescriptor}).`;
    if (mood.hasSecondary) {
      prompt += ` Also noted: ${mood.secondary} (Intensity: ${mood.secondaryIntensityDescriptor}).`;
    }
    prompt += `\n\n`;

    // Behaviors
    const checkedBehaviors = Object.entries(behaviors)
      .filter(([key, val]) => val && key !== 'other')
      .map(([key]) => key.replace(/([A-Z])/g, ' $1'));
    if (
      checkedBehaviors.length > 0 ||
      (behaviors.other && behaviors.otherDescription.trim() !== '')
    ) {
      prompt += `Observed Behaviors: ${checkedBehaviors.join(', ')}.`;
      if (behaviors.otherDescription.trim()) {
        prompt += ` Additional detail: ${behaviors.otherDescription}.`;
      }
      prompt += `\n\n`;
    }

    // Activities
    const participatedActivities = Object.entries(activities)
      .filter(([, val]) => val.participated)
      .map(([name, val]) => `${name} (${val.engagementDescriptor})`);
    if (participatedActivities.length > 0) {
      prompt += `Activities & Engagement: ${participatedActivities.join('; ')}.\n\n`;
    }

    // Social
    prompt += `Social Interactions: Peer - ${social.peer}, Staff - ${social.staff}, Overall Interaction Level - ${social.overallInteractionDescriptor}.\n\n`;

    // Health
    const healthConcerns = [
      health.medicationsTaken && 'medications taken',
      health.sleepIssues && 'sleep issues',
      health.appetiteIssues && 'appetite issues',
      health.physicalComplaints && 'physical complaints',
      health.hygieneIssues && 'hygiene issues',
      health.safetyConcerns && 'safety concerns',
    ].filter(Boolean);
    if (healthConcerns.length > 0) {
      prompt += `Health & Safety Concerns: ${healthConcerns.join(', ')}.`;
      if (health.healthDescription.trim() !== '') {
        prompt += ` Details: ${health.healthDescription}.`;
      }
      prompt += `\n\n`;
    }

    // Incidents
    if (incidents.occurred) {
      prompt += `Incident: ${incidents.description}. Coping Skills Used: `;
      const usedSkills = Object.entries(incidents.copingSkillsUsed)
        .filter(([, val]) => val)
        .map(([key]) => key.replace(/([A-Z])/g, ' $1'));
      prompt += usedSkills.join(', ');
      if (
        incidents.copingSkillsUsed.other &&
        incidents.otherCopingSkillDescription.trim() !== ''
      ) {
        prompt += `, Other: ${incidents.otherCopingSkillDescription}`;
      }
      prompt += `. Effectiveness: ${incidents.effectivenessDescriptor}.\n\n`;
    }

    // Additional Notes
    if (additionalNotes.trim()) {
      prompt += `Additional Notes: ${additionalNotes}\n\n`;
    }

    // Final instruction
    prompt += `
Please synthesize the above information into a single, cohesive paragraph approximately 150-200 words. Focus on the most clinically significant observations and conclude with one key clinical insight or recommendation. Avoid using numerical scores; instead, use qualitative descriptors to describe intensity and engagement levels.
    `;

    return prompt;
  }

  // -------------------------------
  // 5) Generate Note Handler
  // -------------------------------
  const handleGenerateNote = async () => {
    setLoading(true);
    setErrorMsg(null);
    setGeneratedNote('');

    try {
      const rawData = collectFormData();
      const transformedData = transformData(rawData);
      const prompt = createAiPrompt(transformedData);

      const response = await fetch('/api/generateNote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate note.');
      }

      const { generatedNote } = await response.json();
      setGeneratedNote(generatedNote);
    } catch (error: unknown) {
      console.error('Note generation error:', error);
      if (error instanceof Error) {
        setErrorMsg(error.message);
      } else {
        setErrorMsg('An unknown error occurred.');
      }
    } finally {
      setLoading(false);
    }
  };

  // -------------------------------
  // 6) Reset Handler
  // -------------------------------
  const handleReset = () => {
    setMood({
      primary: 'Stable',
      intensity: 5,
      hasSecondary: false,
      secondary: 'Anxious',
      secondaryIntensity: 5,
    });
    setBehaviors({
      cooperative: false,
      followingRules: false,
      respectful: false,
      disruptive: false,
      withdrawn: false,
      aggressive: false,
      impulsive: false,
      other: false,
      otherDescription: '',
    });
    setActivities({
      'Group Therapy': { participated: false, engagement: 5 },
      'Individual Therapy': { participated: false, engagement: 5 },
      'Recreational Activities': { participated: false, engagement: 5 },
      'Skill Building Groups': { participated: false, engagement: 5 },
    });
    setSocial({
      peer: 'Appropriate',
      staff: 'Appropriate',
      overallInteraction: 5,
    });
    setHealth({
      medicationsTaken: false,
      sleepIssues: false,
      appetiteIssues: false,
      physicalComplaints: false,
      hygieneIssues: false,
      safetyConcerns: false,
      healthDescription: '',
    });
    setIncidents({
      occurred: false,
      description: '',
      copingSkillsUsed: {
        deepBreathing: false,
        mindfulness: false,
        distraction: false,
        journaling: false,
        physicalActivity: false,
        talkingToStaff: false,
        other: false,
      },
      otherCopingSkillDescription: '',
      effectiveness: 5,
    });
    setAdditionalNotes('');
    setGeneratedNote('');
    setErrorMsg(null);
  };

  // -------------------------------
  // 7) Collapsible Sections States
  // -------------------------------
  const [showMood, setShowMood] = useState(true);
  const [showBehaviors, setShowBehaviors] = useState(true);
  const [showActivities, setShowActivities] = useState(true);
  const [showSocial, setShowSocial] = useState(true);
  const [showHealth, setShowHealth] = useState(true);
  const [showIncidents, setShowIncidents] = useState(true);
  const [showAdditional, setShowAdditional] = useState(true);

  // -------------------------------
  // 8) Render the Component
  // -------------------------------
  return (
    <div className="min-h-screen font-sans bg-gradient-to-b from-white to-indigo-50">
      {/* Hero Section (no illustration, no dark mode) */}
      <div className="bg-primary-800 text-white py-16 px-4 sm:px-6 lg:px-8 mb-10">
        <div className="max-w-7xl mx-auto text-center">
          <h1 className="text-4xl font-extrabold tracking-tight sm:text-5xl md:text-6xl">
            Try FloNotes In Action
          </h1>
          <p className="mt-4 max-w-3xl mx-auto text-base sm:text-lg md:text-xl">
            Experience how FloNotes can transform your clinical documentation process with our
            intuitive, interactive demo.
          </p>
        </div>
      </div>

      {/* Main Demo Interface */}
      <div className="max-w-7xl mx-auto py-2 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Left Column: The Form */}
          <div className="bg-white rounded-lg shadow-md p-6 md:p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Progress Note Inputs</h2>

            {/* Error Message */}
            {errorMsg && (
              <p className="text-sm text-red-600 mb-2">Error: {errorMsg}</p>
            )}

            {/* Collapsible: Mood Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowMood(!showMood)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Mood</span>
                <span>{showMood ? '–' : '+'}</span>
              </button>

              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showMood ? 'max-h-[1000px] mt-3' : 'max-h-0'
                }`}
              >
                {/* Primary Mood (Floating Label) */}
                <div className="relative mb-4">
                  <select
                    className="block w-full appearance-none bg-transparent border-b border-gray-300 py-2 text-gray-700 focus:outline-none focus:border-indigo-500"
                    value={mood.primary}
                    onChange={(e) => setMood({ ...mood, primary: e.target.value })}
                  >
                    <option>Stable</option>
                    <option>Depressed</option>
                    <option>Anxious</option>
                    <option>Irritable</option>
                    <option>Withdrawn</option>
                    <option>Agitated</option>
                    <option>Happy</option>
                    <option>Sad</option>
                    <option>Joyful</option>
                    <option>Content</option>
                    <option>Optimistic</option>
                    <option>Energetic</option>
                    <option>Grateful</option>
                  </select>
                  <label className="absolute left-0 top-0 text-xs text-gray-500 pointer-events-none">
                    Primary Mood
                  </label>
                </div>

                <label className="block text-sm font-medium text-gray-700">
                  Mood Intensity (1-10)
                </label>
                <input
                  type="range"
                  min={1}
                  max={10}
                  className="w-full mb-1 accent-indigo-600"
                  value={mood.intensity}
                  onChange={(e) => setMood({ ...mood, intensity: Number(e.target.value) })}
                />
                <p className="text-sm text-gray-500 mb-2">
                  Current Intensity: {mood.intensity}/10
                </p>

                <div className="flex items-center space-x-2 mb-3">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                    checked={mood.hasSecondary}
                    onChange={(e) => setMood({ ...mood, hasSecondary: e.target.checked })}
                  />
                  <label className="text-sm font-medium text-gray-700">
                    Add Secondary Mood
                  </label>
                </div>

                <div
                  className={`overflow-hidden transition-all duration-300 ${
                    mood.hasSecondary ? 'max-h-[400px] mb-2' : 'max-h-0'
                  }`}
                >
                  <div className="relative mb-3">
                    <select
                      className="block w-full appearance-none bg-transparent border-b border-gray-300 py-2 text-gray-700 focus:outline-none focus:border-indigo-500"
                      value={mood.secondary}
                      onChange={(e) => setMood({ ...mood, secondary: e.target.value })}
                    >
                      <option>Stable</option>
                      <option>Depressed</option>
                      <option>Anxious</option>
                      <option>Irritable</option>
                      <option>Withdrawn</option>
                      <option>Agitated</option>
                      <option>Happy</option>
                      <option>Sad</option>
                      <option>Joyful</option>
                      <option>Content</option>
                      <option>Optimistic</option>
                      <option>Energetic</option>
                      <option>Grateful</option>
                    </select>
                    <label className="absolute left-0 top-0 text-xs text-gray-500 pointer-events-none">
                      Secondary Mood
                    </label>
                  </div>

                  <label className="block text-sm font-medium text-gray-700">
                    Secondary Intensity (1-10)
                  </label>
                  <input
                    type="range"
                    min={1}
                    max={10}
                    className="w-full mb-1 accent-indigo-600"
                    value={mood.secondaryIntensity}
                    onChange={(e) =>
                      setMood({ ...mood, secondaryIntensity: Number(e.target.value) })
                    }
                  />
                  <p className="text-sm text-gray-500">
                    Current: {mood.secondaryIntensity}/10
                  </p>
                </div>
              </div>
            </div>

            {/* Collapsible: Behaviors Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowBehaviors(!showBehaviors)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Behaviors</span>
                <span>{showBehaviors ? '–' : '+'}</span>
              </button>
              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showBehaviors ? 'max-h-[800px] mt-3' : 'max-h-0'
                }`}
              >
                <div className="grid grid-cols-2 gap-2">
                  {Object.entries(behaviors)
                    .filter(([key]) => !['otherDescription'].includes(key))
                    .map(([key, val]) => {
                      if (key === 'other') {
                        return (
                          <div key={key} className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                              checked={val as boolean}
                              onChange={(e) =>
                                setBehaviors({ ...behaviors, [key]: e.target.checked })
                              }
                            />
                            <label className="text-sm capitalize text-gray-700">
                              {key.replace(/([A-Z])/g, ' $1')}
                            </label>
                          </div>
                        );
                      }
                      if (typeof val === 'boolean') {
                        return (
                          <div key={key} className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                              checked={val}
                              onChange={(e) =>
                                setBehaviors({ ...behaviors, [key]: e.target.checked })
                              }
                            />
                            <label className="text-sm capitalize text-gray-700">
                              {key.replace(/([A-Z])/g, ' $1')}
                            </label>
                          </div>
                        );
                      }
                      return null;
                    })}
                </div>

                {/* 'Other' Behavior Description */}
                {behaviors.other && (
                  <textarea
                    className="mt-3 w-full border border-gray-300 rounded-md p-2 bg-transparent text-gray-900 focus:outline-none focus:border-indigo-500"
                    rows={2}
                    placeholder="Describe other behavior..."
                    value={behaviors.otherDescription}
                    onChange={(e) =>
                      setBehaviors({ ...behaviors, otherDescription: e.target.value })
                    }
                  />
                )}
              </div>
            </div>

            {/* Collapsible: Activities Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowActivities(!showActivities)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Activities & Engagement</span>
                <span>{showActivities ? '–' : '+'}</span>
              </button>
              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showActivities ? 'max-h-[1500px] mt-3' : 'max-h-0'
                }`}
              >
                {Object.entries(activities).map(([activityName, data]) => (
                  <div key={activityName} className="mb-4">
                    <div className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                        checked={data.participated}
                        onChange={(e) =>
                          setActivities({
                            ...activities,
                            [activityName]: {
                              ...data,
                              participated: e.target.checked,
                            },
                          })
                        }
                      />
                      <label className="text-sm font-medium text-gray-700">
                        {activityName}
                      </label>
                    </div>

                    {data.participated && (
                      <div className="ml-6 mt-1">
                        <label className="block text-xs font-medium text-gray-700">
                          Engagement (1-10)
                        </label>
                        <input
                          type="range"
                          min={1}
                          max={10}
                          className="w-full accent-indigo-600"
                          value={data.engagement}
                          onChange={(e) =>
                            setActivities({
                              ...activities,
                              [activityName]: {
                                ...data,
                                engagement: Number(e.target.value),
                              },
                            })
                          }
                        />
                        <p className="text-xs text-gray-500">
                          Current: {data.engagement}/10
                        </p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Collapsible: Social Interactions Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowSocial(!showSocial)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Social Interactions</span>
                <span>{showSocial ? '–' : '+'}</span>
              </button>
              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showSocial ? 'max-h-[500px] mt-3' : 'max-h-0'
                }`}
              >
                <div className="grid grid-cols-2 gap-4 mb-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1 flex items-center">
                      Peer Interactions
                      <HelpCircle className="ml-1 h-4 w-4 text-gray-400 cursor-pointer">
                        <title>How the client interacts with other peers in the session or environment.</title>
                      </HelpCircle>
                    </label>
                    <select
                      className="w-full border-b border-gray-300 bg-transparent py-1 text-gray-700 focus:outline-none focus:border-indigo-500"
                      value={social.peer}
                      onChange={(e) => setSocial({ ...social, peer: e.target.value })}
                    >
                      <option>Appropriate</option>
                      <option>Inappropriate</option>
                      <option>Mixed</option>
                      <option>Isolated</option>
                      <option>Boundaries Issues</option>
                      <option>No Peer Contact</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1 flex items-center">
                      Staff Interactions
                      <HelpCircle className="ml-1 h-4 w-4 text-gray-400 cursor-pointer">
                        <title>How the client engages with staff or authority figures.</title>
                      </HelpCircle>
                    </label>
                    <select
                      className="w-full border-b border-gray-300 bg-transparent py-1 text-gray-700 focus:outline-none focus:border-indigo-500"
                      value={social.staff}
                      onChange={(e) => setSocial({ ...social, staff: e.target.value })}
                    >
                      <option>Appropriate</option>
                      <option>Inappropriate</option>
                      <option>Mixed</option>
                      <option>Avoidant</option>
                      <option>Oppositional</option>
                      <option>Seeking</option>
                    </select>
                  </div>
                </div>

                <label className="block text-xs font-medium text-gray-700 mb-1">
                  Overall Social Interaction Level (1-10)
                </label>
                <input
                  type="range"
                  min={1}
                  max={10}
                  className="w-full accent-indigo-600"
                  value={social.overallInteraction}
                  onChange={(e) =>
                    setSocial({ ...social, overallInteraction: Number(e.target.value) })
                  }
                />
                <p className="text-xs text-gray-500">
                  Current: {social.overallInteraction}/10
                </p>
              </div>
            </div>

            {/* Collapsible: Health & Safety Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowHealth(!showHealth)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Health & Safety</span>
                <span>{showHealth ? '–' : '+'}</span>
              </button>
              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showHealth ? 'max-h-[600px] mt-3' : 'max-h-0'
                }`}
              >
                <div className="grid grid-cols-2 gap-2">
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      checked={health.medicationsTaken}
                      onChange={(e) =>
                        setHealth({ ...health, medicationsTaken: e.target.checked })
                      }
                    />
                    <label className="text-sm text-gray-700">Medications Taken</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      checked={health.sleepIssues}
                      onChange={(e) =>
                        setHealth({ ...health, sleepIssues: e.target.checked })
                      }
                    />
                    <label className="text-sm text-gray-700">Sleep Issues</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      checked={health.appetiteIssues}
                      onChange={(e) =>
                        setHealth({ ...health, appetiteIssues: e.target.checked })
                      }
                    />
                    <label className="text-sm text-gray-700">Appetite Issues</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      checked={health.physicalComplaints}
                      onChange={(e) =>
                        setHealth({ ...health, physicalComplaints: e.target.checked })
                      }
                    />
                    <label className="text-sm text-gray-700">Physical Complaints</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      checked={health.hygieneIssues}
                      onChange={(e) =>
                        setHealth({ ...health, hygieneIssues: e.target.checked })
                      }
                    />
                    <label className="text-sm text-gray-700">Hygiene Issues</label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                      checked={health.safetyConcerns}
                      onChange={(e) =>
                        setHealth({ ...health, safetyConcerns: e.target.checked })
                      }
                    />
                    <label className="text-sm text-gray-700">Safety Concerns</label>
                  </div>
                </div>

                {(health.medicationsTaken ||
                  health.sleepIssues ||
                  health.appetiteIssues ||
                  health.physicalComplaints ||
                  health.hygieneIssues ||
                  health.safetyConcerns) && (
                  <textarea
                    className="mt-3 w-full border border-gray-300 rounded-md p-2 bg-transparent text-gray-900 focus:outline-none focus:border-indigo-500"
                    rows={3}
                    placeholder="Describe the health and safety issues..."
                    value={health.healthDescription}
                    onChange={(e) => setHealth({ ...health, healthDescription: e.target.value })}
                  />
                )}
              </div>
            </div>

            {/* Collapsible: Incidents Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowIncidents(!showIncidents)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Incidents</span>
                <span>{showIncidents ? '–' : '+'}</span>
              </button>
              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showIncidents ? 'max-h-[700px] mt-3' : 'max-h-0'
                }`}
              >
                <div className="flex items-center space-x-2 mb-3">
                  <input
                    type="checkbox"
                    className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                    checked={incidents.occurred}
                    onChange={(e) =>
                      setIncidents({ ...incidents, occurred: e.target.checked })
                    }
                  />
                  <label className="block text-sm font-medium text-gray-700">
                    Incident Occurred
                  </label>
                </div>

                {incidents.occurred && (
                  <>
                    <textarea
                      className="w-full border border-gray-300 rounded-md p-2 bg-transparent text-gray-900 mb-3 focus:outline-none focus:border-indigo-500"
                      rows={3}
                      placeholder="Describe the incident..."
                      value={incidents.description}
                      onChange={(e) =>
                        setIncidents({ ...incidents, description: e.target.value })
                      }
                    />

                    <label className="block text-xs font-medium text-gray-700 mb-2">
                      Coping Skills Used
                    </label>
                    <div className="grid grid-cols-2 gap-2 mb-3">
                      {Object.entries(incidents.copingSkillsUsed).map(([skill, val]) => (
                        <div key={skill} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            className="h-4 w-4 text-indigo-600 border-gray-300 rounded"
                            checked={val}
                            onChange={(e) =>
                              setIncidents({
                                ...incidents,
                                copingSkillsUsed: {
                                  ...incidents.copingSkillsUsed,
                                  [skill]: e.target.checked,
                                },
                              })
                            }
                          />
                          <label className="text-sm capitalize text-gray-700">
                            {skill.replace(/([A-Z])/g, ' $1')}
                          </label>
                        </div>
                      ))}
                    </div>

                    {incidents.copingSkillsUsed.other && (
                      <textarea
                        className="w-full border border-gray-300 rounded-md p-2 bg-transparent text-gray-900 mb-3 focus:outline-none focus:border-indigo-500"
                        rows={2}
                        placeholder="Describe other coping skill..."
                        value={incidents.otherCopingSkillDescription}
                        onChange={(e) =>
                          setIncidents({
                            ...incidents,
                            otherCopingSkillDescription: e.target.value,
                          })
                        }
                      />
                    )}

                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      Effectiveness of Coping Skills (1-10)
                    </label>
                    <input
                      type="range"
                      min={1}
                      max={10}
                      className="w-full mb-1 accent-indigo-600"
                      value={incidents.effectiveness}
                      onChange={(e) =>
                        setIncidents({
                          ...incidents,
                          effectiveness: Number(e.target.value),
                        })
                      }
                    />
                    <p className="text-xs text-gray-500">
                      Current: {incidents.effectiveness}/10
                    </p>
                  </>
                )}
              </div>
            </div>

            {/* Collapsible: Additional Notes Section */}
            <div className="mb-5">
              <button
                onClick={() => setShowAdditional(!showAdditional)}
                className="w-full flex items-center justify-between px-3 py-2 bg-indigo-50 text-indigo-900 font-semibold rounded-lg focus:outline-none"
              >
                <span>Additional Notes</span>
                <span>{showAdditional ? '–' : '+'}</span>
              </button>
              <div
                className={`overflow-hidden transition-all duration-300 ${
                  showAdditional ? 'max-h-[400px] mt-3' : 'max-h-0'
                }`}
              >
                <textarea
                  className="w-full border border-gray-300 rounded-md p-2 bg-transparent text-gray-900 focus:outline-none focus:border-indigo-500"
                  rows={3}
                  placeholder="Enter any additional observations, incidents, or important information..."
                  value={additionalNotes}
                  onChange={(e) => setAdditionalNotes(e.target.value)}
                />
              </div>
            </div>

            {/* Generate & Reset Buttons */}
            <div className="flex space-x-4">
              <button
                onClick={handleGenerateNote}
                className={`inline-flex items-center px-4 py-2 text-base font-medium rounded-md shadow-sm text-white ${
                  loading
                    ? 'bg-indigo-300 cursor-not-allowed'
                    : 'bg-indigo-600 hover:bg-indigo-700'
                }`}
                disabled={loading}
              >
                <MessageSquare className="mr-2 h-5 w-5" />
                {loading ? 'Generating...' : 'Generate Note'}
              </button>
              <button
                onClick={handleReset}
                className={`inline-flex items-center px-4 py-2 text-base font-medium rounded-md shadow-sm text-gray-700 border border-gray-300 ${
                  loading
                    ? 'bg-gray-200 cursor-not-allowed'
                    : 'bg-white hover:bg-gray-50'
                }`}
                disabled={loading}
              >
                <RotateCcw className="mr-2 h-5 w-5" />
                Reset
              </button>
            </div>
          </div>

          {/* Right Column: Generated Note Preview */}
          <div className="bg-white rounded-lg shadow-md p-6 flex flex-col">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">Generated Note</h3>
              <button
                onClick={() => setSaveModalOpen(true)}
                className="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200"
              >
                <Save className="mr-1.5 h-4 w-4" />
                Save
              </button>
            </div>
            <div className="prose prose-sm max-w-none flex-1 overflow-auto border border-gray-100 rounded-md p-4 bg-gray-50">
              {generatedNote ? (
                <p className="text-gray-700 whitespace-pre-wrap">
                  {generatedNote}
                </p>
              ) : (
                <p className="text-gray-500 italic">
                  Fill in the form on the left and click “Generate Note” to see an AI-powered
                  progress note.
                </p>
              )}
            </div>

            {/* Promotional Box */}
            <div className="mt-6 bg-indigo-50 border-l-4 border-indigo-400 p-4 rounded-md shadow-sm">
              <h4 className="text-lg font-semibold text-indigo-900 mb-2">
                All note inputs can be customized for YOUR needs!
              </h4>
              <p className="text-indigo-800 text-sm leading-relaxed">
                FloNotes is designed to adapt to your practice’s unique workflows and clinical
                documentation requirements. Whether you need custom fields, specialized sections,
                or AI-driven insights tailored to your specific treatments, we can build a note
                generator that fits your business perfectly. By partnering with us, you’ll get
                an efficient, user-friendly tool to streamline your notes—so you can focus on
                delivering the best care possible.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Save Modal */}
      {saveModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-30">
          <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full space-y-4">
            <h2 className="text-lg font-semibold text-gray-900">Save Note</h2>
            <p className="text-gray-700">
              This is a demo. The save functionality isn’t implemented yet, but imagine we’re saving
              your generated note securely here!
            </p>
            <div className="flex justify-end">
              <button
                onClick={() => setSaveModalOpen(false)}
                className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Demo;

================
File: src/pages/features.tsx
================
// src/pages/features.tsx
import React from 'react';
import { Brain, Shield, Database, Layout, FileText, Users, BarChart, Settings } from 'lucide-react';

export default function Features() {
  const mainFeatures = [
    {
      icon: <Brain className="w-8 h-8" />,
      title: "AI-Powered Note Generation",
      description: "Our advanced AI understands clinical context and generates comprehensive progress notes that maintain professional standards while saving valuable time."
    },
    {
      icon: <Shield className="w-8 h-8" />,
      title: "HIPAA Compliant Security",
      description: "Enterprise-grade encryption and security measures ensure all patient data is protected according to healthcare compliance standards."
    },
    {
      icon: <FileText className="w-8 h-8" />,
      title: "Customizable Templates",
      description: "Create and customize note templates that match your specific clinical workflow and documentation requirements."
    }
  ];

  const additionalFeatures = [
    {
      icon: <Layout className="w-6 h-6" />,
      title: "Intuitive Interface",
      description: "Clean, modern interface designed specifically for healthcare professionals."
    },
    {
      icon: <Database className="w-6 h-6" />,
      title: "Secure Storage",
      description: "Encrypted cloud storage with automatic backups and easy retrieval."
    },
    {
      icon: <Users className="w-6 h-6" />,
      title: "Team Collaboration",
      description: "Share notes and collaborate with your healthcare team securely."
    },
    {
      icon: <BarChart className="w-6 h-6" />,
      title: "Progress Tracking",
      description: "Monitor patient progress with comprehensive analytics and reporting."
    },
    {
      icon: <Settings className="w-6 h-6" />,
      title: "Integration Ready",
      description: "Seamlessly integrate with existing EHR systems and healthcare platforms."
    }
  ];

  return (
    <div className="bg-white">
      {/* Hero Section */}
      <div className="relative bg-primary-800 py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="lg:text-center">
            <h1 className="text-4xl font-bold tracking-tight text-white sm:text-5xl lg:text-6xl">
              Powerful Features for Mental Health Professionals
            </h1>
            <p className="mt-4 text-xl text-primary-100">
              Everything you need to streamline your clinical documentation workflow.
            </p>
          </div>
        </div>
      </div>

      {/* Main Features */}
      <div className="py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 gap-12 lg:grid-cols-3">
            {mainFeatures.map((feature, index) => (
              <div key={index} className="relative">
                <div className="absolute h-16 w-16 flex items-center justify-center rounded-xl bg-primary-600 text-white">
                  {feature.icon}
                </div>
                <div className="ml-20">
                  <h3 className="text-xl font-semibold text-gray-900">{feature.title}</h3>
                  <p className="mt-2 text-base text-gray-500">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Additional Features Grid */}
      <div className="bg-gray-50 py-16 sm:py-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <h2 className="text-3xl font-bold text-gray-900">Additional Features</h2>
            <p className="mt-4 text-lg text-gray-500">
              Comprehensive tools to support your clinical practice
            </p>
          </div>
          <div className="mt-12 grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3">
            {additionalFeatures.map((feature, index) => (
              <div key={index} className="bg-white rounded-lg shadow-sm p-6">
                <div className="text-primary-600">{feature.icon}</div>
                <h3 className="mt-4 text-lg font-medium text-gray-900">{feature.title}</h3>
                <p className="mt-2 text-base text-gray-500">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-primary-700">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
            <span className="block">Ready to get started?</span>
            <span className="block text-primary-200">Try FloNotes today.</span>
          </h2>
          <div className="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div className="inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-primary-600 bg-white hover:bg-primary-50"
              >
                Get Started
              </a>
            </div>
            <div className="ml-3 inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
              >
                Learn More
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/index.tsx
================
// src/pages/index.tsx
import React from 'react';
import Link from 'next/link';
import { 
  Brain, 
  Shield, 
  Clock, 
  ChartBar, 
  Check,
  BarChart,
  Settings
} from 'lucide-react';

export default function Home() {
  const features = [
    {
      icon: <Brain className="h-6 w-6" />,
      title: "AI-Powered Note Generation",
      description: "Generate comprehensive clinical notes in seconds with our advanced AI technology."
    },
    {
      icon: <Shield className="h-6 w-6" />,
      title: "HIPAA Compliant",
      description: "Enterprise-grade security ensuring your patient data remains protected and compliant."
    },
    {
      icon: <Clock className="h-6 w-6" />,
      title: "Save Time",
      description: "Reduce documentation time by up to 70% while maintaining clinical accuracy."
    },
    {
      icon: <ChartBar className="h-6 w-6" />,
      title: "Detailed Analytics",
      description: "Track patient progress and treatment outcomes with comprehensive analytics."
    }
  ];

  return (
    <div className="relative">
      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="max-w-7xl mx-auto">
          <div className="relative z-10 pb-8 bg-white sm:pb-16 md:pb-20 lg:pb-28 xl:pb-32">
            <main className="mt-10 mx-auto max-w-7xl px-4 sm:mt-12 sm:px-6 md:mt-16 lg:mt-20 lg:px-8 xl:mt-28">
              <div className="sm:text-center lg:text-left">
                <h1 className="text-4xl tracking-tight font-bold text-gray-900 sm:text-5xl md:text-6xl">
                  <span className="block">Transform Your Clinical</span>
                  <span className="block text-primary-600">Documentation Process</span>
                </h1>
                <p className="mt-3 text-base text-gray-500 sm:mt-5 sm:text-lg sm:max-w-xl sm:mx-auto md:mt-5 md:text-xl lg:mx-0">
                  FloNotes helps mental health professionals create comprehensive, accurate clinical documentation in less time.
                </p>
                <div className="mt-5 sm:mt-8 sm:flex sm:justify-center lg:justify-start">
                  <div className="rounded-md shadow">
                    <Link
                      href="/demo"
                      className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 md:py-4 md:text-lg md:px-10"
                    >
                      Get Started
                    </Link>
                  </div>
                  <div className="mt-3 sm:mt-0 sm:ml-3">
                    <Link
                      href="/features"
                      className="w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-primary-700 bg-primary-100 hover:bg-primary-200 md:py-4 md:text-lg md:px-10"
                    >
                      Learn More
                    </Link>
                  </div>
                </div>
              </div>
            </main>
          </div>
        </div>
      </div>

      {/* Features Section */}
      <div className="py-12 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="lg:text-center">
            <h2 className="text-base text-primary-600 font-semibold tracking-wide uppercase">
              Features
            </h2>
            <p className="mt-2 text-3xl leading-8 font-bold tracking-tight text-gray-900 sm:text-4xl">
              A Better Way to Document Patient Care
            </p>
            <p className="mt-4 max-w-2xl text-xl text-gray-500 lg:mx-auto">
              Designed specifically for mental health professionals, FloNotes combines clinical expertise with cutting-edge technology.
            </p>
          </div>

          <div className="mt-10">
            <div className="grid grid-cols-1 gap-10 sm:grid-cols-2 lg:grid-cols-4">
              {features.map((feature, index) => (
                <div key={index} className="relative">
                  <div className="absolute flex items-center justify-center h-12 w-12 rounded-md bg-primary-500 text-white">
                    {feature.icon}
                  </div>
                  <p className="ml-16 text-lg leading-6 font-medium text-gray-900">
                    {feature.title}
                  </p>
                  <p className="mt-2 ml-16 text-base text-gray-500">
                    {feature.description}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Why FloNotes Section */}
      <div className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 sm:text-4xl">
              Why Choose FloNotes?
            </h2>
            <p className="mt-4 text-xl text-gray-500">
              More than just note-taking software - a complete solution for modern mental health practices
            </p>
          </div>

          <div className="grid grid-cols-1 gap-12 lg:grid-cols-2">
            {/* AI-Powered Intelligence */}
            <div className="relative bg-white rounded-xl shadow-sm p-8">
              <div className="flex items-center mb-6">
                <div className="h-12 w-12 bg-primary-100 rounded-xl flex items-center justify-center">
                  <Brain className="h-6 w-6 text-primary-600" />
                </div>
                <h3 className="ml-4 text-xl font-semibold text-gray-900">
                  AI-Powered Intelligence
                </h3>
              </div>
              <p className="text-gray-600 mb-4">
                Our advanced AI assistant revolutionizes clinical documentation by generating context-aware notes that incorporate patient history, previous treatments, and patterns of progress, ensuring comprehensive and meaningful documentation.
              </p>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Context-aware note generation using historical patient data</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Intelligent pattern recognition across treatment history</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Automated risk factor identification and alerts</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Natural language queries for instant information access</span>
                </li>
              </ul>
            </div>

            {/* Advanced Analytics */}
            <div className="relative bg-white rounded-xl shadow-sm p-8">
              <div className="flex items-center mb-6">
                <div className="h-12 w-12 bg-primary-100 rounded-xl flex items-center justify-center">
                  <BarChart className="h-6 w-6 text-primary-600" />
                </div>
                <h3 className="ml-4 text-xl font-semibold text-gray-900">
                  Advanced Analytics & Progress Tracking
                </h3>
              </div>
              <p className="text-gray-600 mb-4">
                Transform patient data into actionable insights with our comprehensive analytics suite. 
                Track progress, identify patterns, and make data-driven decisions to improve outcomes.
              </p>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Daily progress tracking and visualization</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Customizable outcome measures and metrics</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Trend analysis and predictive insights</span>
                </li>
              </ul>
            </div>

            {/* Streamlined Workflow */}
            <div className="relative bg-white rounded-xl shadow-sm p-8">
              <div className="flex items-center mb-6">
                <div className="h-12 w-12 bg-primary-100 rounded-xl flex items-center justify-center">
                  <Settings className="h-6 w-6 text-primary-600" />
                </div>
                <h3 className="ml-4 text-xl font-semibold text-gray-900">
                  Effortless Implementation
                </h3>
              </div>
              <p className="text-gray-600 mb-4">
                Designed for immediate adoption with minimal training required. Our intuitive interface 
                and customizable workflows ensure your team can start using FloNotes effectively from day one.
              </p>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Intuitive interface requiring minimal training</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Customizable templates and workflows</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Seamless integration with existing systems</span>
                </li>
              </ul>
            </div>

            {/* Security & Compliance */}
            <div className="relative bg-white rounded-xl shadow-sm p-8">
              <div className="flex items-center mb-6">
                <div className="h-12 w-12 bg-primary-100 rounded-xl flex items-center justify-center">
                  <Shield className="h-6 w-6 text-primary-600" />
                </div>
                <h3 className="ml-4 text-xl font-semibold text-gray-900">
                  Enterprise-Grade Security
                </h3>
              </div>
              <p className="text-gray-600 mb-4">
                Built with security and compliance at its core. FloNotes exceeds HIPAA requirements 
                and implements the latest security measures to protect sensitive patient data.
              </p>
              <ul className="space-y-3">
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">HIPAA compliant infrastructure</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">End-to-end encryption for all data</span>
                </li>
                <li className="flex items-start">
                  <Check className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" />
                  <span className="text-gray-600">Regular security audits and updates</span>
                </li>
              </ul>
            </div>
          </div>

          {/* Additional Benefits */}
          <div className="mt-16 bg-white rounded-xl shadow-sm p-8">
            <h3 className="text-2xl font-semibold text-gray-900 mb-8 text-center">
              Additional Benefits
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Practice Customization</h4>
                  <p className="mt-1 text-gray-600">Tailored to your specific practice needs and workflows</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Automated Documentation</h4>
                  <p className="mt-1 text-gray-600">Context-aware note generation using historical patient data</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Treatment Continuity</h4>
                  <p className="mt-1 text-gray-600">AI-powered insights from previous sessions and treatment history</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Risk Management</h4>
                  <p className="mt-1 text-gray-600">Proactive identification of potential concerns and treatment gaps</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Regulatory Compliance</h4>
                  <p className="mt-1 text-gray-600">Ensures documentation meets all regulatory requirements</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Quality Assurance</h4>
                  <p className="mt-1 text-gray-600">Automated checks for completeness and clinical best practices</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Smart Scheduling</h4>
                  <p className="mt-1 text-gray-600">AI-optimized appointment scheduling and reminders</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Research Insights</h4>
                  <p className="mt-1 text-gray-600">Aggregate anonymized data for treatment efficacy research</p>
                </div>
              </div>
              <div className="flex items-start">
                <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0" />
                <div>
                  <h4 className="font-medium text-gray-900">Multi-Provider Support</h4>
                  <p className="mt-1 text-gray-600">Seamless collaboration across your entire care team</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-primary-700">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
            <span className="block">Ready to transform your practice?</span>
            <span className="block text-primary-200">Start your journey with FloNotes today.</span>
          </h2>
          <div className="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div className="inline-flex rounded-md shadow">
              <Link
                href="/demo"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-primary-600 bg-white hover:bg-primary-50"
              >
                Try Demo
              </Link>
            </div>
            <div className="ml-3 inline-flex rounded-md shadow">
              <Link
                href="/contact"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700"
              >
                Contact Sales
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/pricing.tsx
================
// src/pages/pricing.tsx
import React, { useState } from 'react';
import { Check } from 'lucide-react';

interface PriceTier {
  name: string;
  id: string;
  href: string;
  price: {
    monthly: number | string;
    annual: number | string;
  };
  description: string;
  features: string[];
  mostPopular: boolean;
}

interface FAQ {
  question: string;
  answer: string;
}

export default function Pricing() {
  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'annual'>('monthly');

  const tiers: PriceTier[] = [
    {
      name: 'Starter',
      id: 'tier-starter',
      href: '#',
      price: { monthly: 49, annual: 39 },
      description: 'Perfect for individual practitioners',
      features: [
        'Up to 50 notes per month',
        'Basic note templates',
        'Standard security features',
        'Email support',
        'Basic analytics',
      ],
      mostPopular: false,
    },
    {
      name: 'Professional',
      id: 'tier-professional',
      href: '#',
      price: { monthly: 79, annual: 69 },
      description: 'Ideal for growing practices',
      features: [
        'Unlimited notes',
        'Custom templates',
        'Advanced security features',
        'Priority support',
        'Advanced analytics',
        'Team collaboration',
        'API access',
      ],
      mostPopular: true,
    },
    {
      name: 'Enterprise',
      id: 'tier-enterprise',
      href: '#',
      price: { monthly: 'Custom', annual: 'Custom' },
      description: 'For large healthcare organizations',
      features: [
        'Everything in Professional',
        'Custom integrations',
        'Dedicated support',
        'Custom security controls',
        'SLA guarantees',
        'Custom training',
        'On-premise deployment option',
      ],
      mostPopular: false,
    },
  ];

  const faqs: FAQ[] = [
    {
      question: 'How does billing work?',
      answer: 'You will be billed monthly or annually depending on your preference. All plans come with a 14-day free trial.'
    },
    {
      question: 'Can I switch plans later?',
      answer: 'Yes, you can upgrade or downgrade your plan at any time. The changes will be reflected in your next billing cycle.'
    },
    {
      question: 'What happens if I exceed my note limit?',
      answer: 'On the Starter plan, you will be notified when approaching your limit. You can upgrade to Professional for unlimited notes.'
    },
    {
      question: 'Do you offer refunds?',
      answer: 'Yes, we offer a 30-day money-back guarantee if you are not satisfied with our service.'
    },
    {
      question: 'What kind of support do you offer?',
      answer: 'All plans include email support. Professional and Enterprise plans include priority support with faster response times.'
    },
    {
      question: 'Is there a contract or commitment?',
      answer: 'No long-term contracts required. You can cancel your subscription at any time.'
    }
  ];

  return (
    <div className="bg-gray-50">
      {/* Header */}
      <div className="bg-primary-900">
        <div className="pt-12 sm:pt-16 lg:pt-24">
          <div className="max-w-7xl mx-auto text-center px-4 sm:px-6 lg:px-8">
            <div className="max-w-3xl mx-auto space-y-2 lg:max-w-none">
              <h1 className="text-lg leading-6 font-semibold text-gray-300">
                Pricing
              </h1>
              <p className="text-3xl font-bold text-white sm:text-4xl lg:text-5xl">
                The right price for your practice
              </p>
              <p className="text-xl text-gray-300">
                Choose the plan that best fits your needs
              </p>
            </div>
          </div>

          {/* Billing Toggle */}
          <div className="mt-8 flex justify-center">
            <div className="relative self-center bg-gray-800 rounded-lg p-0.5 flex sm:mt-8">
              <button
                type="button"
                className={`relative w-32 rounded-md py-2 text-sm font-medium whitespace-nowrap focus:outline-none focus:z-10 sm:w-40 sm:px-8 ${
                  billingPeriod === 'monthly'
                    ? 'bg-primary-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
                onClick={() => setBillingPeriod('monthly')}
              >
                Monthly billing
              </button>
              <button
                type="button"
                className={`relative w-32 rounded-md py-2 text-sm font-medium whitespace-nowrap focus:outline-none focus:z-10 sm:w-40 sm:px-8 ${
                  billingPeriod === 'annual'
                    ? 'bg-primary-500 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
                onClick={() => setBillingPeriod('annual')}
              >
                Annual billing
              </button>
            </div>
          </div>
        </div>

        <div className="mt-8 pb-12 bg-gray-50 sm:mt-12 sm:pb-16 lg:mt-16 lg:pb-24">
          <div className="relative">
            <div className="absolute inset-0 h-3/4 bg-primary-900" />
            <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div className="max-w-md mx-auto grid gap-8 lg:max-w-5xl lg:grid-cols-3">
                {tiers.map((tier) => (
                  <div
                    key={tier.id}
                    className={`flex flex-col rounded-lg shadow-lg overflow-hidden transform transition-all duration-200 ${
                      tier.mostPopular
                        ? 'ring-2 ring-primary-500 scale-105'
                        : 'ring-1 ring-gray-200 hover:scale-105'
                    }`}
                  >
                    <div className="px-6 py-8 bg-white">
                      <div>
                        <h3
                          className="text-2xl font-semibold text-gray-900 text-center"
                          id={tier.id}
                        >
                          {tier.name}
                        </h3>
                        <div className="mt-4 flex justify-center">
                          <span className="px-4 py-1 rounded-full text-sm font-semibold bg-primary-100 text-primary-800">
                            {tier.description}
                          </span>
                        </div>
                        <p className="mt-8 text-center">
                          <span className="text-4xl font-bold text-gray-900">
                            ${typeof tier.price[billingPeriod] === 'number' ? tier.price[billingPeriod] : ''}
                          </span>
                          {typeof tier.price[billingPeriod] === 'number' && (
                            <span className="text-base font-medium text-gray-500">
                              /{billingPeriod === 'monthly' ? 'month' : 'mo annually'}
                            </span>
                          )}
                          {typeof tier.price[billingPeriod] === 'string' && (
                            <span className="text-xl font-medium text-gray-500">
                              {tier.price[billingPeriod]}
                            </span>
                          )}
                        </p>
                      </div>
                    </div>
                    <div className="flex-1 flex flex-col justify-between px-6 pt-6 pb-8 bg-gray-50 space-y-6 sm:p-10">
                      <ul className="space-y-4">
                        {tier.features.map((feature, index) => (
                          <li key={index} className="flex items-start">
                            <div className="flex-shrink-0">
                              <Check className="h-6 w-6 text-green-500" />
                            </div>
                            <p className="ml-3 text-base text-gray-700">{feature}</p>
                          </li>
                        ))}
                      </ul>
                      <a
                        href={tier.href}
                        className={`block w-full text-center rounded-md px-4 py-2 text-sm font-semibold transition-colors duration-200 ${
                          tier.mostPopular
                            ? 'bg-primary-500 text-white hover:bg-primary-600'
                            : 'bg-primary-50 text-primary-700 hover:bg-primary-100'
                        }`}
                      >
                        Get started
                      </a>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="max-w-7xl mx-auto py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-3xl mx-auto text-center">
          <h2 className="text-3xl font-bold text-gray-900">Frequently asked questions</h2>
          <p className="mt-4 text-lg text-gray-500">
            Can&apos;t find the answer you&apos;re looking for? Contact our support team.
          </p>
        </div>
        <div className="mt-12 grid gap-8 lg:grid-cols-2">
          {faqs.map((faq, index) => (
            <div key={index} className="bg-white rounded-lg shadow-sm p-8 hover:shadow-md transition-shadow duration-200">
              <div className="text-lg leading-6 font-medium text-gray-900">
                {faq.question}
              </div>
              <div className="mt-2 text-base text-gray-500">
                {faq.answer}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-primary-700">
        <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between">
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
            <span className="block">Ready to get started?</span>
            <span className="block text-primary-200">Start your free trial today.</span>
          </h2>
          <div className="mt-8 flex lg:mt-0 lg:flex-shrink-0">
            <div className="inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-primary-600 bg-white hover:bg-primary-50 transition-colors duration-200"
              >
                Get started
              </a>
            </div>
            <div className="ml-3 inline-flex rounded-md shadow">
              <a
                href="#"
                className="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 transition-colors duration-200"
              >
                Learn more
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/pages/technical-specs.tsx
================
// src/pages/technical-specs.tsx
import React, { useState } from 'react';
import { Shield, Laptop, Network, Settings, Download, Server, Search, Activity } from 'lucide-react';

interface Specification {
  title: string;
  details: string[];
}

interface SpecificationSection {
  icon: React.ReactNode;
  title: string;
  description: string;
  specs: Specification[];
}

interface Specifications {
  [key: string]: SpecificationSection;
}

export default function TechnicalSpecs() {
  const [searchQuery, setSearchQuery] = useState('');

  const specifications: Specifications = {
    system: {
      icon: <Laptop className="h-6 w-6" />,
      title: 'System Requirements',
      description: 'Minimum technical requirements for optimal performance',
      specs: [
        {
          title: 'Supported Platforms',
          details: [
            'Chrome 80+ (recommended for best performance)',
            'Firefox 75+ with latest security updates',
            'Safari 13+ on macOS and iOS',
            'Edge 80+ with Chromium engine',
            'PWA support for mobile devices'
          ]
        },
        {
          title: 'Hardware Requirements',
          details: [
            'CPU: Modern dual-core processor (2.0 GHz+)',
            'RAM: 4GB minimum, 8GB recommended',
            'Display: 1280x720 minimum, 1920x1080 recommended',
            'Storage: 500MB free space for caching',
            'Network: 5+ Mbps stable connection'
          ]
        },
        {
          title: 'Mobile Requirements',
          details: [
            'iOS 13+ or Android 8+',
            'Minimum 2GB RAM',
            'Stable 4G/5G or WiFi connection',
            'Biometric authentication support recommended'
          ]
        }
      ]
    },
    security: {
      icon: <Shield className="h-6 w-6" />,
      title: 'Security Features',
      description: 'Enterprise-grade security measures and compliance standards',
      specs: [
        {
          title: 'Data Protection',
          details: [
            'AES-256 encryption at rest',
            'TLS 1.3 encryption in transit',
            'End-to-end encryption for sensitive data',
            'Regular security audits and penetration testing',
            'Multi-factor authentication (MFA)'
          ]
        },
        {
          title: 'Access Control',
          details: [
            'Role-based access control (RBAC)',
            'Single Sign-On (SSO) support',
            'IP whitelisting capabilities',
            'Session management and timeout controls',
            'Audit logging and monitoring'
          ]
        },
        {
          title: 'Compliance',
          details: [
            'HIPAA compliance with BAA',
            'HITECH Act compliance',
            'SOC 2 Type II certified',
            'GDPR compliant',
            'Regular compliance audits'
          ]
        }
      ]
    },
    integration: {
      icon: <Network className="h-6 w-6" />,
      title: 'Integration Capabilities',
      description: 'Standards support and integration features',
      specs: [
        {
          title: 'Healthcare Standards',
          details: [
            'HL7 FHIR R4 compatible with full support',
            'SMART on FHIR enabled for app integration',
            'CDA document support and generation',
            'ICD-10 coding system integration',
            'SNOMED CT terminology support'
          ]
        },
        {
          title: 'API Features',
          details: [
            'RESTful API with comprehensive documentation',
            'GraphQL API for flexible queries',
            'OAuth 2.0 and JWT authentication',
            'Webhook support for real-time updates',
            'Rate limiting and usage monitoring'
          ]
        }
      ]
    },
    performance: {
      icon: <Activity className="h-6 w-6" />,
      title: 'Performance Specifications',
      description: 'System performance metrics and capabilities',
      specs: [
        {
          title: 'Response Times',
          details: [
            'Note generation: < 2 seconds average',
            'Page load time: < 1.5 seconds',
            'API response time: < 200ms',
            'Search queries: < 500ms',
            '99.9% uptime SLA guaranteed'
          ]
        },
        {
          title: 'Scalability',
          details: [
            'Support for 10,000+ concurrent users',
            'Automatic horizontal scaling',
            'Load balancing across regions',
            'CDN integration for static assets',
            'Elastic resource allocation'
          ]
        }
      ]
    },
    infrastructure: {
      icon: <Server className="h-6 w-6" />,
      title: 'Infrastructure',
      description: 'Cloud infrastructure and hosting details',
      specs: [
        {
          title: 'Cloud Platform',
          details: [
            'AWS primary infrastructure',
            'Multi-region deployment',
            'Auto-scaling configuration',
            'Containerized microservices',
            'Kubernetes orchestration'
          ]
        },
        {
          title: 'Backup & Recovery',
          details: [
            'Real-time data replication',
            'Daily automated backups',
            'Point-in-time recovery',
            '15-minute RPO (Recovery Point Objective)',
            '1-hour RTO (Recovery Time Objective)'
          ]
        }
      ]
    }
  };

  const filteredSpecs = Object.entries(specifications).reduce<Specifications>((acc, [key, section]) => {
    if (!searchQuery) return { ...acc, [key]: section };
    
    const matchingSpecs = section.specs.filter(spec => 
      spec.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      spec.details.some(detail => detail.toLowerCase().includes(searchQuery.toLowerCase()))
    );
    
    if (matchingSpecs.length > 0) {
      return { ...acc, [key]: { ...section, specs: matchingSpecs } };
    }
    return acc;
  }, {});

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <div className="bg-primary-800">
        <div className="max-w-7xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:px-8">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight text-white sm:text-5xl md:text-6xl">
              Technical Specifications
            </h1>
            <p className="mt-3 max-w-md mx-auto text-base text-primary-100 sm:text-lg md:mt-5 md:text-xl md:max-w-3xl">
              Comprehensive technical details about FloNotes&apos; infrastructure, security, and capabilities
            </p>
          </div>
        </div>
      </div>

      {/* Search */}
      <div className="max-w-7xl mx-auto pt-6 px-4 sm:px-6 lg:px-8">
        <div className="relative flex-1 max-w-lg mb-6">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search specifications..."
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
      </div>

      {/* Specs Content */}
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
          {Object.entries(filteredSpecs).map(([key, section]) => (
            <div
              key={key}
              className="bg-white rounded-lg shadow-lg overflow-hidden"
            >
              <div className="p-6">
                <div className="flex items-center">
                  <div className="flex-shrink-0">
                    <div className="h-12 w-12 bg-primary-50 rounded-md flex items-center justify-center text-primary-600">
                      {section.icon}
                    </div>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-lg font-medium text-gray-900">
                      {section.title}
                    </h3>
                    <p className="text-sm text-gray-500">{section.description}</p>
                  </div>
                </div>

                <div className="mt-6 space-y-6">
                  {section.specs.map((spec: Specification, index: number) => (
                    <div key={index} className="border-t pt-6 first:border-t-0 first:pt-0">
                      <h4 className="text-sm font-medium text-gray-900 mb-3">
                        {spec.title}
                      </h4>
                      <ul className="space-y-3">
                        {spec.details.map((detail: string, i: number) => (
                          <li key={i} className="text-sm text-gray-500 flex items-start">
                            <svg
                              className="h-5 w-5 text-green-400 mr-2 flex-shrink-0"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M5 13l4 4L19 7"
                              />
                            </svg>
                            {detail}
                          </li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Download Section */}
        <div className="mt-16">
          <div className="bg-primary-50 rounded-lg shadow-sm overflow-hidden">
            <div className="px-6 py-8 sm:p-10">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-medium text-primary-900">
                    Technical Documentation
                  </h3>
                  <p className="mt-2 text-sm text-primary-700">
                    Download comprehensive technical specifications and integration guides
                  </p>
                </div>
                <div className="ml-4">
                  <button 
                    className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-primary-700 bg-white hover:bg-primary-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-150"
                    onClick={() => window.open('/docs/technical-specs.pdf', '_blank')}
                  >
                    <Download className="mr-2 h-5 w-5" />
                    Download Specs
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
        primary: {
          50: '#eef2ff',
          100: '#e0e7ff',
          200: '#c7d2fe',
          300: '#a5b4fc',
          400: '#818cf8',
          500: '#6366f1', // Primary brand color
          600: '#4f46e5',
          700: '#4338ca',
          800: '#3730a3',
          900: '#312e81',
        }
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true, // Added
    "module": "esnext",
    "moduleResolution": "node", // Changed from "bundler" to "node"
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
